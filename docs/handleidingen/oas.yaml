openapi: 3.0.0
info:
    title: 'Common Gateway'
    description: 'The Common Gateway is a further Dutch development of the European API Platform. API Platform is a project of Les Tilleus and, in itself, an extension of the Symfony framework. API Platform is a tool for delivering APIs based on standardized documentation and is used for various French and German government projects. Including Digital state, a precursor to Xroute, GOV.UK and Common Ground. The project is now part of joinup.eu (the European equivalent of Common Ground).'
    version: 1.0.3
servers:
    -
        url: 'https://api.opencatalogi.nl/'
        description: 'The kubernetes server'
paths:
    '/search/{id}':
        get:
            operationId: search-get-item
            summary: Search
            tags:
                - search
            description: 'Generic Search Endpoint'
            parameters:
                -
                    name: id
                    in: path
                    description: ''
                    required: true
                    schema:
                        type: string
            responses:
                200:
                    description: 'Generic Search Endpoint'
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Application'
                        application/xml:
                            schema:
                                $ref: '#/components/schemas/Application'
    /search:
        get:
            operationId: search-get-collection
            summary: Search
            tags:
                - search
            description: 'Generic Search Endpoint'
            responses:
                200:
                    description: OK
                    content:
                        application/json:
                            schema:
                                required:
                                    - count
                                    - results
                                type: object
                                properties:
                                    count:
                                        type: integer
                                        example: 1
                                    next:
                                        type: string
                                        format: uri
                                        nullable: true
                                    previous:
                                        type: string
                                        format: uri
                                        nullable: true
                                    results:
                                        type: array
                                        items: { $ref: '#/components/schemas/Application' }
                        application/xml:
                            schema:
                                required:
                                    - count
                                    - results
                                type: object
                                properties:
                                    count:
                                        type: integer
                                        example: 1
                                    next:
                                        type: string
                                        format: uri
                                        nullable: true
                                    previous:
                                        type: string
                                        format: uri
                                        nullable: true
                                    results:
                                        type: array
                                        items: { $ref: '#/components/schemas/Application' }
            parameters:
                -
                    name: name
                    in: query
                    description: ''
                    required: true
                    schema:
                        type: string
                -
                    name: shortDescription
                    in: query
                    description: ''
                    required: false
                    schema:
                        type: string
                -
                    name: description
                    in: query
                    description: ''
                    required: false
                    schema:
                        type: string
                -
                    name: detailPageImageUrl
                    in: query
                    description: ''
                    required: false
                    schema:
                        type: string
                -
                    name: documentationUrl
                    in: query
                    description: ''
                    required: false
                    schema:
                        type: string
                -
                    name: demoUrl
                    in: query
                    description: ''
                    required: false
                    schema:
                        type: string
                -
                    name: bpmnProcessUrl
                    in: query
                    description: ''
                    required: false
                    schema:
                        type: string
                -
                    name: isPublished
                    in: query
                    description: ''
                    required: false
                    schema:
                        type: boolean
                -
                    name: owner
                    in: query
                    description: ''
                    required: false
                    schema:
                        type: object
                        properties:
                            fullName:
                                type: string
                                nullable: true
                            email:
                                type: string
                                nullable: true
                            pictureUrl:
                                type: string
                                nullable: true
                -
                    name: components
                    in: query
                    description: ''
                    required: false
                    schema:
                        type: object
                        properties:
                            applicationId:
                                type: string
                                example: '487842915'
                                nullable: true
                            name:
                                type: string
                                description: 'This key contains the name of the software. It contains the (short) public name of the product, which can be localised in the specific localisation section. It should be the name most people usually refer to the software. In case the software has both an internal ''code'' name and a commercial name, use the commercial name.'
                                example: Medusa
                                nullable: true
                            landingURL:
                                type: string
                                format: url
                                description: 'If the url parameter does not serve a human readable or browsable page, but only serves source code to a source control client, with this key you have an option to specify a landing page. This page, ideally, is where your users will land when they will click a button labeled something like ''Go to the application source code''. In case the product provides an automated graphical installer, this URL can point to a page which contains a reference to the source code but also offers the download of such an installer.'
                                example: 'https://example.com/italia/medusa'
                                nullable: true
                            isBasedOn:
                                type: string
                                description: "In case this software is a variant or a fork of another software, which might or might not contain a publiccode.yml file, this key will contain the url of the original project(s).\n\nThe existence of this key identifies the fork as a software variant, descending from the specified repositories."
                                example: 'https://github.com/italia/otello.git'
                                nullable: true
                            softwareVersion:
                                type: string
                                description: "This key contains the latest stable version number of the software. The version number is a string that is not meant to be interpreted and parsed but just displayed; parsers should not assume semantic versioning or any other specific version format.\n\nThe key can be omitted if the software is currently in initial development and has never been released yet."
                                example: '1.0'
                                nullable: true
                            releaseDate:
                                type: string
                                format: date
                                description: 'This key contains the date at which the latest version was released. This date is mandatory if the software has been released at least once and thus the version number is present.'
                                example: '2022-01-01'
                                nullable: true
                            logo:
                                type: string
                                description: 'This key contains the path to the logo of the software. Logos should be in vector format; raster formats are only allowed as a fallback. In this case, they should be transparent PNGs, minimum 1000px of width. The key value can be the relative path to the file starting from the root of the repository, or it can be an absolute URL pointing to the logo in raw version. In both cases, the file must reside inside the same repository where the publiccode.yml file is stored.'
                                example: 'https://avatars0.githubusercontent.com/u/34739001?s=280&v=4'
                                nullable: true
                            platforms:
                                type: array
                                description: "This key specifies which platform the software runs on. It is meant to describe the platforms that users will use to access and operate the software, rather than the platform the software itself runs on.\n\nUse the predefined values if possible. If the software runs on a platform for which a predefined value is not available, a different value can be used."
                                nullable: true
                            categories:
                                type: array
                                description: "A list of words that can be used to describe the software and can help building catalogs of open software.\n\nThe controlled vocabulary List of software categories contains the list of allowed values."
                                nullable: true
                            roadmap:
                                type: string
                                format: url
                                description: 'A link to a public roadmap of the software.'
                                example: 'https://vng.nl/agenda'
                                nullable: true
                            developmentStatus:
                                type: string
                                description: "The keys are:\n\n\n-  concept - The software is just a 'concept'. No actual code may have been produced, and the repository could simply be a placeholder.\n- development - Some effort has gone into the development of the software, but the code is not ready for the end user, even in a preliminary version (beta or alpha) to be tested by end users.\n- beta - The software is in the testing phase (alpha or beta). At this stage, the software might or might not have had a preliminary public release.\n- stable - The software has seen a first public release and is ready to be used in a production environment.\n- obsolete - The software is no longer maintained or kept up to date. All of the source code is archived and kept for historical reasons."
                                example: concept
                                enum:
                                    - concept
                                    - development
                                    - beta
                                    - stable
                                    - obsolete
                                nullable: true
                            softwareType:
                                type: string
                                description: "The keys are:\n\n- standalone/mobile - The software is a standalone, self-contained The software is a native mobile app.\n- standalone/iot - The software is suitable for an IoT context.\n- standalone/desktop - The software is typically installed and run in a a desktop operating system environment.\n- standalone/web - The software represents a web application usable by means of a browser.\n- standalone/backend - The software is a backend application.\n- standalone/other - The software has a different nature from the once listed above.\n- softwareAddon - The software is an addon, such as a plugin or a theme, for a more complex software (e.g. a CMS or an office suite).\n-  library - The software contains a library or an SDK to make it easier to third party developers to create new products.\n- configurationFiles - The software does not contain executable script but a set of configuration files. They may document how to obtain a certain deployment. They could be in the form of plain configuration files, bash scripts, ansible playbooks, Dockerfiles, or other instruction sets."
                                example: standalone/web
                                enum:
                                    - standalone/mobile
                                    - standalone/iot
                                    - standalone/desktop
                                    - standalone/web
                                    - standalone/backend
                                    - standalone/other
                                    - softwareAddon
                                    - library
                                    - configurationFiles
                                    - api
                                    - schema
                                    - data
                                    - process
                                    - model
                                nullable: true
                            inputTypes:
                                type: array
                                description: "A list of Media Types (MIME Types) as mandated in RFC 6838 which the application can handle as input.\n\nIn case the software does not support any input, you can skip this field or use application/x.empty"
                                nullable: true
                            outputTypes:
                                type: array
                                description: "A list of Media Types (MIME Types) as mandated in RFC 6838 which the application can handle as output.\n\nIn case the software does not support any output, you can skip this field or use application/x.empty"
                                nullable: true
                            applicationSuite:
                                _list: '/admin/objects?_self.schema.id=0c2655fb-db80-49ff-b1f0-662bf85b89e0'
                                type: object
                                nullable: true
                            url:
                                _list: '/admin/objects?_self.schema.id=5bd31d2f-fe14-4a1a-94f9-263f747e4485'
                                type: object
                                nullable: true
                            usedBy:
                                _list: '/admin/objects?_self.schema.id=fcc4e57c-f5e2-4527-b8ea-68b9d9bcf50a'
                                type: object
                                description: "A list of the names of prominent public administrations (that will serve as 'testimonials') that are currently known to the software maintainer to be using this software.\n\nParsers are encouraged to enhance this list also with other information that can obtain independently; for instance, a fork of a software, owned by an administration, could be used as a signal of usage of the software."
                                nullable: true
                                multiple: true
                            intendedAudience:
                                _list: '/admin/objects?_self.schema.id=a22a918f-7fac-4395-becb-fbed741ceeea'
                                type: object
                                nullable: true
                            description:
                                _list: '/admin/objects?_self.schema.id=c6b0dd59-1ba2-49f9-8071-61dde39bb5e5'
                                type: object
                                nullable: true
                            legal:
                                _list: '/admin/objects?_self.schema.id=60dc635f-5c92-41b9-957c-f33f17d45f6b'
                                type: object
                                nullable: true
                            maintenance:
                                _list: '/admin/objects?_self.schema.id=1c2c1c24-d6b5-4f43-9eab-a3029e27d9d7'
                                type: object
                                nullable: true
                            localisation:
                                _list: '/admin/objects?_self.schema.id=c7b42d57-3011-4b71-adfc-3f28d4fd6420'
                                type: object
                                nullable: true
                            dependsOn:
                                _list: '/admin/objects?_self.schema.id=3c262092-4617-486c-ba81-165243689ef3'
                                type: object
                                nullable: true
                            nl:
                                _list: '/admin/objects?_self.schema.id=aed2f0ec-7fcc-48db-a0f6-8be16be44e59'
                                type: object
                                nullable: true
                            rating:
                                _list: '/admin/objects?_self.schema.id=cff7ef6c-7b07-4a3a-9596-b2db1a2ac163'
                                type: object
                                nullable: true
    '/components/{id}':
        get:
            operationId: component-get-item
            summary: Component
            tags:
                - component
            description: "Based on the [top level component](https://yml.publiccode.tools/schema.core.html#top-level-keys-and-sections) of public code. represent a pease of software that may iether be  standalone or part of a larger application.\n\n**The PublicCode standard has been extenden for this API in te following way's**\n- To the `type` property the following enums where added\n- - Api\n- - Schema\n- - Data\n- The `inputType` property was used (its depracticed in PublicCode)\n- The `outputType` property was uses (its depracticed in PublicCode)\n- The `nl` country exenstion was added in line with the [PublicCode country extensions](https://yml.publiccode.tools/country.html) guidelines\n- applicationId was added for the codebase repository (like a github repository id)."
            parameters:
                -
                    name: id
                    in: path
                    description: ''
                    required: true
                    schema:
                        type: string
            responses:
                200:
                    description: "Based on the [top level component](https://yml.publiccode.tools/schema.core.html#top-level-keys-and-sections) of public code. represent a pease of software that may iether be  standalone or part of a larger application.\n\n**The PublicCode standard has been extenden for this API in te following way's**\n- To the `type` property the following enums where added\n- - Api\n- - Schema\n- - Data\n- The `inputType` property was used (its depracticed in PublicCode)\n- The `outputType` property was uses (its depracticed in PublicCode)\n- The `nl` country exenstion was added in line with the [PublicCode country extensions](https://yml.publiccode.tools/country.html) guidelines\n- applicationId was added for the codebase repository (like a github repository id)."
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Component'
                        application/xml:
                            schema:
                                $ref: '#/components/schemas/Component'
        put:
            operationId: component-put-item
            summary: Component
            tags:
                - component
            description: "Based on the [top level component](https://yml.publiccode.tools/schema.core.html#top-level-keys-and-sections) of public code. represent a pease of software that may iether be  standalone or part of a larger application.\n\n**The PublicCode standard has been extenden for this API in te following way's**\n- To the `type` property the following enums where added\n- - Api\n- - Schema\n- - Data\n- The `inputType` property was used (its depracticed in PublicCode)\n- The `outputType` property was uses (its depracticed in PublicCode)\n- The `nl` country exenstion was added in line with the [PublicCode country extensions](https://yml.publiccode.tools/country.html) guidelines\n- applicationId was added for the codebase repository (like a github repository id)."
            parameters:
                -
                    name: id
                    in: path
                    description: ''
                    required: true
                    schema:
                        type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Component'
                    application/xml:
                        schema:
                            $ref: '#/components/schemas/Component'
            responses:
                200:
                    description: "Based on the [top level component](https://yml.publiccode.tools/schema.core.html#top-level-keys-and-sections) of public code. represent a pease of software that may iether be  standalone or part of a larger application.\n\n**The PublicCode standard has been extenden for this API in te following way's**\n- To the `type` property the following enums where added\n- - Api\n- - Schema\n- - Data\n- The `inputType` property was used (its depracticed in PublicCode)\n- The `outputType` property was uses (its depracticed in PublicCode)\n- The `nl` country exenstion was added in line with the [PublicCode country extensions](https://yml.publiccode.tools/country.html) guidelines\n- applicationId was added for the codebase repository (like a github repository id)."
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Component'
                        application/xml:
                            schema:
                                $ref: '#/components/schemas/Component'
        patch:
            operationId: component-patch-item
            summary: Component
            tags:
                - component
            description: "Based on the [top level component](https://yml.publiccode.tools/schema.core.html#top-level-keys-and-sections) of public code. represent a pease of software that may iether be  standalone or part of a larger application.\n\n**The PublicCode standard has been extenden for this API in te following way's**\n- To the `type` property the following enums where added\n- - Api\n- - Schema\n- - Data\n- The `inputType` property was used (its depracticed in PublicCode)\n- The `outputType` property was uses (its depracticed in PublicCode)\n- The `nl` country exenstion was added in line with the [PublicCode country extensions](https://yml.publiccode.tools/country.html) guidelines\n- applicationId was added for the codebase repository (like a github repository id)."
            parameters:
                -
                    name: id
                    in: path
                    description: ''
                    required: true
                    schema:
                        type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Component'
                    application/xml:
                        schema:
                            $ref: '#/components/schemas/Component'
            responses:
                200:
                    description: "Based on the [top level component](https://yml.publiccode.tools/schema.core.html#top-level-keys-and-sections) of public code. represent a pease of software that may iether be  standalone or part of a larger application.\n\n**The PublicCode standard has been extenden for this API in te following way's**\n- To the `type` property the following enums where added\n- - Api\n- - Schema\n- - Data\n- The `inputType` property was used (its depracticed in PublicCode)\n- The `outputType` property was uses (its depracticed in PublicCode)\n- The `nl` country exenstion was added in line with the [PublicCode country extensions](https://yml.publiccode.tools/country.html) guidelines\n- applicationId was added for the codebase repository (like a github repository id)."
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Component'
                        application/xml:
                            schema:
                                $ref: '#/components/schemas/Component'
        delete:
            operationId: component-delete-item
            summary: Component
            tags:
                - component
            description: "Based on the [top level component](https://yml.publiccode.tools/schema.core.html#top-level-keys-and-sections) of public code. represent a pease of software that may iether be  standalone or part of a larger application.\n\n**The PublicCode standard has been extenden for this API in te following way's**\n- To the `type` property the following enums where added\n- - Api\n- - Schema\n- - Data\n- The `inputType` property was used (its depracticed in PublicCode)\n- The `outputType` property was uses (its depracticed in PublicCode)\n- The `nl` country exenstion was added in line with the [PublicCode country extensions](https://yml.publiccode.tools/country.html) guidelines\n- applicationId was added for the codebase repository (like a github repository id)."
            parameters:
                -
                    name: id
                    in: path
                    description: ''
                    required: true
                    schema:
                        type: string
            responses:
                200:
                    description: "Based on the [top level component](https://yml.publiccode.tools/schema.core.html#top-level-keys-and-sections) of public code. represent a pease of software that may iether be  standalone or part of a larger application.\n\n**The PublicCode standard has been extenden for this API in te following way's**\n- To the `type` property the following enums where added\n- - Api\n- - Schema\n- - Data\n- The `inputType` property was used (its depracticed in PublicCode)\n- The `outputType` property was uses (its depracticed in PublicCode)\n- The `nl` country exenstion was added in line with the [PublicCode country extensions](https://yml.publiccode.tools/country.html) guidelines\n- applicationId was added for the codebase repository (like a github repository id)."
                    content:
                        application/json:
                            schema:
                                type: string
                                example: 'Object is successfully deleted'
                        application/xml:
                            schema:
                                type: string
                                example: 'Object is successfully deleted'
    /components:
        get:
            operationId: component-get-collection
            summary: Component
            tags:
                - component
            description: "Based on the [top level component](https://yml.publiccode.tools/schema.core.html#top-level-keys-and-sections) of public code. represent a pease of software that may iether be  standalone or part of a larger application.\n\n**The PublicCode standard has been extenden for this API in te following way's**\n- To the `type` property the following enums where added\n- - Api\n- - Schema\n- - Data\n- The `inputType` property was used (its depracticed in PublicCode)\n- The `outputType` property was uses (its depracticed in PublicCode)\n- The `nl` country exenstion was added in line with the [PublicCode country extensions](https://yml.publiccode.tools/country.html) guidelines\n- applicationId was added for the codebase repository (like a github repository id)."
            responses:
                200:
                    description: OK
                    content:
                        application/json:
                            schema:
                                required:
                                    - count
                                    - results
                                type: object
                                properties:
                                    count:
                                        type: integer
                                        example: 1
                                    next:
                                        type: string
                                        format: uri
                                        nullable: true
                                    previous:
                                        type: string
                                        format: uri
                                        nullable: true
                                    results:
                                        type: array
                                        items: { $ref: '#/components/schemas/Component' }
                        application/xml:
                            schema:
                                required:
                                    - count
                                    - results
                                type: object
                                properties:
                                    count:
                                        type: integer
                                        example: 1
                                    next:
                                        type: string
                                        format: uri
                                        nullable: true
                                    previous:
                                        type: string
                                        format: uri
                                        nullable: true
                                    results:
                                        type: array
                                        items: { $ref: '#/components/schemas/Component' }
            parameters:
                -
                    name: applicationId
                    in: query
                    description: ''
                    required: false
                    schema:
                        type: string
                -
                    name: name
                    in: query
                    description: 'This key contains the name of the software. It contains the (short) public name of the product, which can be localised in the specific localisation section. It should be the name most people usually refer to the software. In case the software has both an internal “code” name and a commercial name, use the commercial name.'
                    required: true
                    schema:
                        type: string
                -
                    name: landingURL
                    in: query
                    description: 'If the url parameter does not serve a human readable or browsable page, but only serves source code to a source control client, with this key you have an option to specify a landing page. This page, ideally, is where your users will land when they will click a button labeled something like “Go to the application source code”. In case the product provides an automated graphical installer, this URL can point to a page which contains a reference to the source code but also offers the download of such an installer.'
                    required: false
                    schema:
                        type: string
                        format: url
                -
                    name: isBasedOn
                    in: query
                    description: "In case this software is a variant or a fork of another software, which might or might not contain a publiccode.yml file, this key will contain the url of the original project(s).\n\nThe existence of this key identifies the fork as a software variant, descending from the specified repositories."
                    required: false
                    schema:
                        type: string
                -
                    name: softwareVersion
                    in: query
                    description: "This key contains the latest stable version number of the software. The version number is a string that is not meant to be interpreted and parsed but just displayed; parsers should not assume semantic versioning or any other specific version format.\n\nThe key can be omitted if the software is currently in initial development and has never been released yet."
                    required: false
                    schema:
                        type: string
                -
                    name: releaseDate
                    in: query
                    description: 'This key contains the date at which the latest version was released. This date is mandatory if the software has been released at least once and thus the version number is present.'
                    required: false
                    schema:
                        type: string
                        format: date
                -
                    name: logo
                    in: query
                    description: 'This key contains the path to the logo of the software. Logos should be in vector format; raster formats are only allowed as a fallback. In this case, they should be transparent PNGs, minimum 1000px of width. The key value can be the relative path to the file starting from the root of the repository, or it can be an absolute URL pointing to the logo in raw version. In both cases, the file must reside inside the same repository where the publiccode.yml file is stored.'
                    required: false
                    schema:
                        type: string
                -
                    name: 'platforms[]'
                    in: query
                    description: "This key specifies which platform the software runs on. It is meant to describe the platforms that users will use to access and operate the software, rather than the platform the software itself runs on.\n\nUse the predefined values if possible. If the software runs on a platform for which a predefined value is not available, a different value can be used."
                    required: false
                    schema:
                        type: array
                        items:
                            type: string
                -
                    name: 'categories[]'
                    in: query
                    description: "A list of words that can be used to describe the software and can help building catalogs of open software.\n\nThe controlled vocabulary List of software categories contains the list of allowed values."
                    required: false
                    schema:
                        type: array
                        items:
                            type: string
                -
                    name: roadmap
                    in: query
                    description: 'A link to a public roadmap of the software.'
                    required: false
                    schema:
                        type: string
                        format: url
                -
                    name: developmentStatus
                    in: query
                    description: "The keys are:\n\n\n-  concept - The software is just a “concept”. No actual code may have been produced, and the repository could simply be a placeholder.\n- development - Some effort has gone into the development of the software, but the code is not ready for the end user, even in a preliminary version (beta or alpha) to be tested by end users.\n- beta - The software is in the testing phase (alpha or beta). At this stage, the software might or might not have had a preliminary public release.\n- stable - The software has seen a first public release and is ready to be used in a production environment.\n- obsolete - The software is no longer maintained or kept up to date. All of the source code is archived and kept for historical reasons."
                    required: false
                    schema:
                        type: string
                -
                    name: softwareType
                    in: query
                    description: "The keys are:\n\n- standalone/mobile - The software is a standalone, self-contained The software is a native mobile app.\n- standalone/iot - The software is suitable for an IoT context.\n- standalone/desktop - The software is typically installed and run in a a desktop operating system environment.\n- standalone/web - The software represents a web application usable by means of a browser.\n- standalone/backend - The software is a backend application.\n- standalone/other - The software has a different nature from the once listed above.\n- softwareAddon - The software is an addon, such as a plugin or a theme, for a more complex software (e.g. a CMS or an office suite).\n-  library - The software contains a library or an SDK to make it easier to third party developers to create new products.\n- configurationFiles - The software does not contain executable script but a set of configuration files. They may document how to obtain a certain deployment. They could be in the form of plain configuration files, bash scripts, ansible playbooks, Dockerfiles, or other instruction sets."
                    required: false
                    schema:
                        type: string
                -
                    name: 'inputTypes[]'
                    in: query
                    description: "A list of Media Types (MIME Types) as mandated in RFC 6838 which the application can handle as input.\n\nIn case the software does not support any input, you can skip this field or use application/x.empty"
                    required: false
                    schema:
                        type: array
                        items:
                            type: string
                -
                    name: 'outputTypes[]'
                    in: query
                    description: "A list of Media Types (MIME Types) as mandated in RFC 6838 which the application can handle as output.\n\nIn case the software does not support any output, you can skip this field or use application/x.empty"
                    required: false
                    schema:
                        type: array
                        items:
                            type: string
                -
                    name: applicationSuite
                    in: query
                    description: ''
                    required: false
                    schema:
                        type: object
                        properties:
                            name:
                                type: string
                                nullable: true
                            shortDescription:
                                type: string
                                nullable: true
                            description:
                                type: string
                                nullable: true
                            detailPageImageUrl:
                                type: string
                                nullable: true
                            documentationUrl:
                                type: string
                                nullable: true
                            demoUrl:
                                type: string
                                nullable: true
                            bpmnProcessUrl:
                                type: string
                                nullable: true
                            isPublished:
                                type: boolean
                                nullable: true
                            owner:
                                _list: '/admin/objects?_self.schema.id=215a3f77-b1cc-4269-8a4f-e387c6825d94'
                                type: object
                                nullable: true
                            components:
                                _list: '/admin/objects?_self.schema.id=8ef831a8-8ed4-42d7-977a-48b690244f4a'
                                type: object
                                nullable: true
                                multiple: true
                -
                    name: url
                    in: query
                    description: ''
                    required: false
                    schema:
                        type: object
                        properties:
                            source:
                                type: string
                                enum:
                                    - github
                                    - gitlab
                                nullable: true
                            name:
                                type: string
                                nullable: true
                            url:
                                type: string
                                nullable: true
                            avatar_url:
                                type: string
                                nullable: true
                            last_change:
                                type: string
                                nullable: true
                            stars:
                                type: number
                                nullable: true
                            fork_count:
                                type: number
                                nullable: true
                            issue_open_count:
                                type: number
                                nullable: true
                            merge_request_open_count:
                                type: number
                                nullable: true
                            programming_languages:
                                type: array
                                nullable: true
                            topics:
                                type: array
                                nullable: true
                            content:
                                type: string
                                nullable: true
                            publiccode_url:
                                type: string
                                nullable: true
                            default_owner:
                                type: string
                                nullable: true
                            organisation:
                                _list: '/admin/objects?_self.schema.id=fcc4e57c-f5e2-4527-b8ea-68b9d9bcf50a'
                                type: object
                                nullable: true
                            component:
                                _list: '/admin/objects?_self.schema.id=8ef831a8-8ed4-42d7-977a-48b690244f4a'
                                type: object
                                nullable: true
                -
                    name: usedBy
                    in: query
                    description: "A list of the names of prominent public administrations (that will serve as “testimonials”) that are currently known to the software maintainer to be using this software.\n\nParsers are encouraged to enhance this list also with other information that can obtain independently; for instance, a fork of a software, owned by an administration, could be used as a signal of usage of the software."
                    required: false
                    schema:
                        type: object
                        properties:
                            name:
                                type: string
                                nullable: true
                            description:
                                type: string
                                nullable: true
                            logo:
                                type: string
                                format: uri
                                description: 'The logo of this organisation'
                                nullable: true
                            token:
                                type: string
                                description: 'An optional NL-Design token that contains the organisations style'
                                nullable: true
                            github:
                                type: string
                                format: url
                                description: 'A link the the organisations github '
                                nullable: true
                            gitlab:
                                type: string
                                format: url
                                description: 'A link to the organisations gitlab'
                                nullable: true
                            website:
                                type: string
                                nullable: true
                            phone:
                                type: string
                                nullable: true
                            email:
                                type: string
                                nullable: true
                            type:
                                type: string
                                description: 'The type of this organisation'
                                example: public
                                enum:
                                    - public
                                    - private
                                    - unkown
                                nullable: true
                            catalogusAPI:
                                type: string
                                format: uri
                                nullable: true
                            supports:
                                _list: '/admin/objects?_self.schema.id=8ef831a8-8ed4-42d7-977a-48b690244f4a'
                                type: object
                                description: 'A list of  components supported by this organisation'
                                nullable: true
                                multiple: true
                            owns:
                                _list: '/admin/objects?_self.schema.id=8ef831a8-8ed4-42d7-977a-48b690244f4a'
                                type: object
                                description: 'A list of  components supported by this organisation'
                                nullable: true
                                multiple: true
                            uses:
                                _list: '/admin/objects?_self.schema.id=8ef831a8-8ed4-42d7-977a-48b690244f4a'
                                type: object
                                description: 'A list of  components supported by this organisation'
                                nullable: true
                                multiple: true
                -
                    name: intendedAudience
                    in: query
                    description: ''
                    required: false
                    schema:
                        type: object
                        properties:
                            countries:
                                type: array
                                description: 'This key explicitly includes certain countries in the intended audience, i.e. the software explicitly claims compliance with specific processes, technologies or laws. All countries are specified using lowercase ISO 3166-1 alpha-2 two-letter country codes.'
                                nullable: true
                            unsupportedCountries:
                                type: array
                                description: 'This key explicitly marks countries as NOT supported. This might be the case if there is a conflict between how software is working and a specific law, process or technology. All countries are specified using lowercase ISO 3166-1 alpha-2 two-letter country codes.'
                                nullable: true
                            scope:
                                type: array
                                description: 'This key contains a list of tags related to the field of application of the software.'
                                nullable: true
                -
                    name: description
                    in: query
                    description: ''
                    required: false
                    schema:
                        type: object
                        properties:
                            id:
                                type: string
                                format: uuid
                                nullable: true
                            localisedName:
                                type: string
                                description: 'This key is an opportunity to localise the name in a specific language. It contains the (short) public name of the product. It should be the name most people usually refer to the software. In case the software has both an internal ''code'' name and a commercial name, use the commercial name.'
                                example: Medusa
                                nullable: true
                            shortDescription:
                                type: string
                                description: 'This key contains a short description of the software. It should be a single line containing a single sentence. Maximum 150 characters are allowed.'
                                example: 'Advanced booking system for hospitals'
                                maxLength: 150
                                nullable: true
                            longDescription:
                                type: string
                                description: "This key contains a longer description of the software, between 150 and 10000 chars. It is meant to provide an overview of the capabilities of the software for a potential user. The audience for this text should be that of users of the software, not developers. You can think of this text as the description of the software that would be in its website (if the software had one).\n\nThis description can contain some basic markdown: *italic*, **bold**, bullet points and [links](#)."
                                maxLength: 10000
                                nullable: true
                            documentation:
                                type: string
                                format: url
                                description: "This key contains a reference to the user-level (not developer-level) documentation of the software. The value must be a URL to a hosted version of the documentation.\n\nIt is suggested that the URL points to a hosted version of the documentation that is immediately readable through a common web browser in both desktop and mobile format. The documentation should be rendered in HTML and browsable like a website (with a navigation index, a search bar, etc.).\n\nIf the documentation is instead available only as a document, put a direct view/download link as URL in this key. You should commit the document as part of the source code repository, and then link to it using the code hosting source browser URL (e.g.: GitHub URL to the file). Prefer using open formats like PDF or ODT for maximum interoperability.\n\nWhichever the format for the documentation, remember to make its source files available under an open license, possibly by committing them as part of the repository itself."
                                nullable: true
                            apiDocumentation:
                                type: string
                                format: url
                                description: "This key contains a reference to the API documentation of the software. The value must be a URL to a hosted version of the documentation.\n\nIt is suggested that the URL points to a hosted version of the documentation that is immediately readable through a common web browser. The documentation should be rendered in HTML and browsable like a website (with a navigation index, a search bar, etc.), and if there is a reference or test deployment, possibly offer an interactive interface (e.g. Swagger).\n\nIf the documentation is instead available only as a document, put a direct view/download link as URL in this key. You should commit the document as part of the source code repository, and then link to it using the code hosting source browser URL (e.g.: GitHub URL to the file). Prefer using open formats like PDF or ODT for maximum interoperability.\n\nWhichever the format for the documentation, remember to make its source files available under an open license, possibly by committing them as part of the repository itself."
                                nullable: true
                            features:
                                type: array
                                description: "This key contains a list of software features, describing what capabilities the software allows to do. The audience for this text should be that of public decision makers who will be commissioning the software. The features should thus not target developers; instead of listing technical features referring to implementation details, prefer listing user-visible functionalities of the software.\n\nWhile the key is mandatory, there is no mandatory minimum or maximum number of features that should be listed in this key.\n\nThe suggested number of features to list is between 5 and 20, depending on the software size and complexity. There is no need for exhaustiveness, as users can always read the documentation for additional information."
                                nullable: true
                            screenshots:
                                type: array
                                description: "This key contains one or multiple paths to files showing screenshots of the software. They are meant to give a quick idea on how the software looks like and how it works. The key value can be the relative path to the file starting from the root of the repository, or it can be an absolute URL pointing to the screenshot in raw version. In both cases, the file must reside inside the same repository where the publiccode.yml file is stored.\n\nScreenshots can be of any shape and size; the suggested formats are:\n\n- Desktop: 1280x800 @1x\n- Tablet: 1024x768 @2x\n- Mobile: 375x667 @2x"
                                nullable: true
                            videos:
                                type: array
                                description: "This key contains one or multiple URLs of videos showing how the software works. Like screenshots, videos should be used to give a quick overview on how the software looks like and how it works. Videos must be hosted on a video sharing website that supports the oEmbed standard; popular options are YouTube and Vimeo.\n\nSince videos are an integral part of the documentation, it is recommended to publish them with an open license."
                                nullable: true
                            awards:
                                type: array
                                description: 'A list of awards won by the software.'
                                nullable: true
                -
                    name: legal
                    in: query
                    description: ''
                    required: false
                    schema:
                        type: object
                        properties:
                            license:
                                type: string
                                description: 'This string describes the license under which the software is distributed. The string must contain a valid SPDX expression, referring to one (or multiple) open-source license. Please refer to the SPDX documentation for further information.'
                                example: EUPL-1.0-or-later
                                nullable: true
                            authorsFile:
                                type: string
                                description: 'Some open-source software adopt a convention of identify the copyright holders through a file that lists all the entities that own the copyright. This is common in projects strongly backed by a community where there are many external contributors and no clear single/main copyright owner. In such cases, this key can be used to refer to the authors file, using a path relative to the root of the repository.'
                                example: doc/AUTHORS.txt
                                nullable: true
                            mainCopyrightOwner:
                                _list: '/admin/objects?_self.schema.id=fcc4e57c-f5e2-4527-b8ea-68b9d9bcf50a'
                                type: object
                                nullable: true
                            repoOwner:
                                _list: '/admin/objects?_self.schema.id=fcc4e57c-f5e2-4527-b8ea-68b9d9bcf50a'
                                type: object
                                nullable: true
                -
                    name: maintenance
                    in: query
                    description: ''
                    required: false
                    schema:
                        type: object
                        properties:
                            type:
                                type: string
                                description: "This key describes how the software is currently maintained.\n\ninternal - means that the software is internally maintained by the repository owner;\n\ncontract - means that there is a commercial contract that binds an entity to the maintenance of the software;\n\ncommunity - means that the software is currently maintained by one or more people that donate their time to the project;\n\nnone - means that the software is not actively maintained."
                                example: none
                                enum:
                                    - none
                                    - internal
                                    - contract
                                    - community
                                nullable: true
                            contractors:
                                _list: '/admin/objects?_self.schema.id=5517bde4-c738-464f-908f-36c43e9396c4'
                                type: object
                                description: 'This key describes the entity or entities, if any, that are currently contracted for maintaining the software. They can be companies, organizations, or other collective names.'
                                nullable: true
                                multiple: true
                            contacts:
                                _list: '/admin/objects?_self.schema.id=95d549c5-a946-41d5-9b73-c3ad8d856cd0'
                                type: object
                                description: "One or more contacts maintaining this software.\n\nThis key describes the technical people currently responsible for maintaining the software. All contacts need to be a physical person, not a company or an organisation. If somebody is acting as a representative of an institution, it must be listed within the affiliation of the contact.\n\nIn case of a commercial agreement (or a chain of such agreements), specify the final entities actually contracted to deliver the maintenance. Do not specify the software owner unless it is technically involved with the maintenance of the product as well."
                                nullable: true
                                multiple: true
                -
                    name: localisation
                    in: query
                    description: ''
                    required: false
                    schema:
                        type: object
                        properties:
                            localisationReady:
                                type: boolean
                                description: 'If true, the software has infrastructure in place or is otherwise designed to be multilingual. It does not need to be available in more than one language.'
                                nullable: true
                            availableLanguages:
                                type: array
                                description: "If present, this is the list of languages in which the software is available. Of course, this list will contain at least one language. The primary language subtag cannot be omitted, as mandated by the BCP 47.\n"
                                nullable: true
                -
                    name: dependsOn
                    in: query
                    description: ''
                    required: false
                    schema:
                        type: object
                        properties:
                            hardware:
                                _list: '/admin/objects?_self.schema.id=bae9e322-25f1-48fd-b22b-68f6dd84b3cc'
                                type: object
                                description: 'This key contains a list of hardware dependencies that must be owned to use the software.'
                                nullable: true
                                multiple: true
                            open:
                                _list: '/admin/objects?_self.schema.id=bae9e322-25f1-48fd-b22b-68f6dd84b3cc'
                                type: object
                                description: 'This key contains a list of runtime dependencies that are distributed under an open-source license.'
                                nullable: true
                                multiple: true
                            proprietary:
                                _list: '/admin/objects?_self.schema.id=bae9e322-25f1-48fd-b22b-68f6dd84b3cc'
                                type: object
                                description: 'This key contains a list of runtime dependencies that are distributed under a proprietary license.'
                                nullable: true
                                multiple: true
                -
                    name: nl
                    in: query
                    description: ''
                    required: false
                    schema:
                        type: object
                        properties:
                            apm:
                                type: object
                                nullable: true
                            upl:
                                type: array
                                nullable: true
                            commonground:
                                _list: '/admin/objects?_self.schema.id=804be12c-27c1-44e2-bee7-b848871ff3d7'
                                type: object
                                nullable: true
                            gemma:
                                _list: '/admin/objects?_self.schema.id=288b2a18-4321-4bf9-9d75-64e625e8988c'
                                type: object
                                nullable: true
                -
                    name: rating
                    in: query
                    description: ''
                    required: false
                    schema:
                        type: object
                        properties:
                            rating:
                                type: integer
                                nullable: true
                            maxRating:
                                type: integer
                                nullable: true
                            results:
                                type: array
                                nullable: true
        post:
            operationId: component-post-item
            summary: Component
            tags:
                - component
            description: "Based on the [top level component](https://yml.publiccode.tools/schema.core.html#top-level-keys-and-sections) of public code. represent a pease of software that may iether be  standalone or part of a larger application.\n\n**The PublicCode standard has been extenden for this API in te following way's**\n- To the `type` property the following enums where added\n- - Api\n- - Schema\n- - Data\n- The `inputType` property was used (its depracticed in PublicCode)\n- The `outputType` property was uses (its depracticed in PublicCode)\n- The `nl` country exenstion was added in line with the [PublicCode country extensions](https://yml.publiccode.tools/country.html) guidelines\n- applicationId was added for the codebase repository (like a github repository id)."
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Component'
                    application/xml:
                        schema:
                            $ref: '#/components/schemas/Component'
            responses:
                200:
                    description: "Based on the [top level component](https://yml.publiccode.tools/schema.core.html#top-level-keys-and-sections) of public code. represent a pease of software that may iether be  standalone or part of a larger application.\n\n**The PublicCode standard has been extenden for this API in te following way's**\n- To the `type` property the following enums where added\n- - Api\n- - Schema\n- - Data\n- The `inputType` property was used (its depracticed in PublicCode)\n- The `outputType` property was uses (its depracticed in PublicCode)\n- The `nl` country exenstion was added in line with the [PublicCode country extensions](https://yml.publiccode.tools/country.html) guidelines\n- applicationId was added for the codebase repository (like a github repository id)."
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Component'
                        application/xml:
                            schema:
                                $ref: '#/components/schemas/Component'
    '/organizations/{id}':
        get:
            operationId: organisation-get-item
            summary: Organisation
            tags:
                - organisation
            description: 'extension of the publiccode standard '
            parameters:
                -
                    name: id
                    in: path
                    description: ''
                    required: true
                    schema:
                        type: string
            responses:
                200:
                    description: 'extension of the publiccode standard '
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Organisation'
                        application/xml:
                            schema:
                                $ref: '#/components/schemas/Organisation'
        put:
            operationId: organisation-put-item
            summary: Organisation
            tags:
                - organisation
            description: 'extension of the publiccode standard '
            parameters:
                -
                    name: id
                    in: path
                    description: ''
                    required: true
                    schema:
                        type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Organisation'
                    application/xml:
                        schema:
                            $ref: '#/components/schemas/Organisation'
            responses:
                200:
                    description: 'extension of the publiccode standard '
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Organisation'
                        application/xml:
                            schema:
                                $ref: '#/components/schemas/Organisation'
        patch:
            operationId: organisation-patch-item
            summary: Organisation
            tags:
                - organisation
            description: 'extension of the publiccode standard '
            parameters:
                -
                    name: id
                    in: path
                    description: ''
                    required: true
                    schema:
                        type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Organisation'
                    application/xml:
                        schema:
                            $ref: '#/components/schemas/Organisation'
            responses:
                200:
                    description: 'extension of the publiccode standard '
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Organisation'
                        application/xml:
                            schema:
                                $ref: '#/components/schemas/Organisation'
        delete:
            operationId: organisation-delete-item
            summary: Organisation
            tags:
                - organisation
            description: 'extension of the publiccode standard '
            parameters:
                -
                    name: id
                    in: path
                    description: ''
                    required: true
                    schema:
                        type: string
            responses:
                200:
                    description: 'extension of the publiccode standard '
                    content:
                        application/json:
                            schema:
                                type: string
                                example: 'Object is successfully deleted'
                        application/xml:
                            schema:
                                type: string
                                example: 'Object is successfully deleted'
    /organizations:
        get:
            operationId: organisation-get-collection
            summary: Organisation
            tags:
                - organisation
            description: 'extension of the publiccode standard '
            responses:
                200:
                    description: OK
                    content:
                        application/json:
                            schema:
                                required:
                                    - count
                                    - results
                                type: object
                                properties:
                                    count:
                                        type: integer
                                        example: 1
                                    next:
                                        type: string
                                        format: uri
                                        nullable: true
                                    previous:
                                        type: string
                                        format: uri
                                        nullable: true
                                    results:
                                        type: array
                                        items: { $ref: '#/components/schemas/Organisation' }
                        application/xml:
                            schema:
                                required:
                                    - count
                                    - results
                                type: object
                                properties:
                                    count:
                                        type: integer
                                        example: 1
                                    next:
                                        type: string
                                        format: uri
                                        nullable: true
                                    previous:
                                        type: string
                                        format: uri
                                        nullable: true
                                    results:
                                        type: array
                                        items: { $ref: '#/components/schemas/Organisation' }
            parameters:
                -
                    name: name
                    in: query
                    description: ''
                    required: false
                    schema:
                        type: string
                -
                    name: description
                    in: query
                    description: ''
                    required: false
                    schema:
                        type: string
                -
                    name: logo
                    in: query
                    description: 'The logo of this organisation'
                    required: false
                    schema:
                        type: string
                        format: uri
                -
                    name: token
                    in: query
                    description: 'An optional NL-Design token that contains the organisations style'
                    required: false
                    schema:
                        type: string
                -
                    name: github
                    in: query
                    description: 'A link the the organisations github '
                    required: false
                    schema:
                        type: string
                        format: url
                -
                    name: gitlab
                    in: query
                    description: 'A link to the organisations gitlab'
                    required: false
                    schema:
                        type: string
                        format: url
                -
                    name: website
                    in: query
                    description: ''
                    required: false
                    schema:
                        type: string
                -
                    name: phone
                    in: query
                    description: ''
                    required: false
                    schema:
                        type: string
                -
                    name: email
                    in: query
                    description: ''
                    required: false
                    schema:
                        type: string
                -
                    name: type
                    in: query
                    description: 'The type of this organisation'
                    required: false
                    schema:
                        type: string
                -
                    name: catalogusAPI
                    in: query
                    description: ''
                    required: false
                    schema:
                        type: string
                        format: uri
                -
                    name: supports
                    in: query
                    description: 'A list of  components supported by this organisation'
                    required: false
                    schema:
                        type: object
                        properties:
                            applicationId:
                                type: string
                                example: '487842915'
                                nullable: true
                            name:
                                type: string
                                description: 'This key contains the name of the software. It contains the (short) public name of the product, which can be localised in the specific localisation section. It should be the name most people usually refer to the software. In case the software has both an internal ''code'' name and a commercial name, use the commercial name.'
                                example: Medusa
                                nullable: true
                            landingURL:
                                type: string
                                format: url
                                description: 'If the url parameter does not serve a human readable or browsable page, but only serves source code to a source control client, with this key you have an option to specify a landing page. This page, ideally, is where your users will land when they will click a button labeled something like ''Go to the application source code''. In case the product provides an automated graphical installer, this URL can point to a page which contains a reference to the source code but also offers the download of such an installer.'
                                example: 'https://example.com/italia/medusa'
                                nullable: true
                            isBasedOn:
                                type: string
                                description: "In case this software is a variant or a fork of another software, which might or might not contain a publiccode.yml file, this key will contain the url of the original project(s).\n\nThe existence of this key identifies the fork as a software variant, descending from the specified repositories."
                                example: 'https://github.com/italia/otello.git'
                                nullable: true
                            softwareVersion:
                                type: string
                                description: "This key contains the latest stable version number of the software. The version number is a string that is not meant to be interpreted and parsed but just displayed; parsers should not assume semantic versioning or any other specific version format.\n\nThe key can be omitted if the software is currently in initial development and has never been released yet."
                                example: '1.0'
                                nullable: true
                            releaseDate:
                                type: string
                                format: date
                                description: 'This key contains the date at which the latest version was released. This date is mandatory if the software has been released at least once and thus the version number is present.'
                                example: '2022-01-01'
                                nullable: true
                            logo:
                                type: string
                                description: 'This key contains the path to the logo of the software. Logos should be in vector format; raster formats are only allowed as a fallback. In this case, they should be transparent PNGs, minimum 1000px of width. The key value can be the relative path to the file starting from the root of the repository, or it can be an absolute URL pointing to the logo in raw version. In both cases, the file must reside inside the same repository where the publiccode.yml file is stored.'
                                example: 'https://avatars0.githubusercontent.com/u/34739001?s=280&v=4'
                                nullable: true
                            platforms:
                                type: array
                                description: "This key specifies which platform the software runs on. It is meant to describe the platforms that users will use to access and operate the software, rather than the platform the software itself runs on.\n\nUse the predefined values if possible. If the software runs on a platform for which a predefined value is not available, a different value can be used."
                                nullable: true
                            categories:
                                type: array
                                description: "A list of words that can be used to describe the software and can help building catalogs of open software.\n\nThe controlled vocabulary List of software categories contains the list of allowed values."
                                nullable: true
                            roadmap:
                                type: string
                                format: url
                                description: 'A link to a public roadmap of the software.'
                                example: 'https://vng.nl/agenda'
                                nullable: true
                            developmentStatus:
                                type: string
                                description: "The keys are:\n\n\n-  concept - The software is just a 'concept'. No actual code may have been produced, and the repository could simply be a placeholder.\n- development - Some effort has gone into the development of the software, but the code is not ready for the end user, even in a preliminary version (beta or alpha) to be tested by end users.\n- beta - The software is in the testing phase (alpha or beta). At this stage, the software might or might not have had a preliminary public release.\n- stable - The software has seen a first public release and is ready to be used in a production environment.\n- obsolete - The software is no longer maintained or kept up to date. All of the source code is archived and kept for historical reasons."
                                example: concept
                                enum:
                                    - concept
                                    - development
                                    - beta
                                    - stable
                                    - obsolete
                                nullable: true
                            softwareType:
                                type: string
                                description: "The keys are:\n\n- standalone/mobile - The software is a standalone, self-contained The software is a native mobile app.\n- standalone/iot - The software is suitable for an IoT context.\n- standalone/desktop - The software is typically installed and run in a a desktop operating system environment.\n- standalone/web - The software represents a web application usable by means of a browser.\n- standalone/backend - The software is a backend application.\n- standalone/other - The software has a different nature from the once listed above.\n- softwareAddon - The software is an addon, such as a plugin or a theme, for a more complex software (e.g. a CMS or an office suite).\n-  library - The software contains a library or an SDK to make it easier to third party developers to create new products.\n- configurationFiles - The software does not contain executable script but a set of configuration files. They may document how to obtain a certain deployment. They could be in the form of plain configuration files, bash scripts, ansible playbooks, Dockerfiles, or other instruction sets."
                                example: standalone/web
                                enum:
                                    - standalone/mobile
                                    - standalone/iot
                                    - standalone/desktop
                                    - standalone/web
                                    - standalone/backend
                                    - standalone/other
                                    - softwareAddon
                                    - library
                                    - configurationFiles
                                    - api
                                    - schema
                                    - data
                                    - process
                                    - model
                                nullable: true
                            inputTypes:
                                type: array
                                description: "A list of Media Types (MIME Types) as mandated in RFC 6838 which the application can handle as input.\n\nIn case the software does not support any input, you can skip this field or use application/x.empty"
                                nullable: true
                            outputTypes:
                                type: array
                                description: "A list of Media Types (MIME Types) as mandated in RFC 6838 which the application can handle as output.\n\nIn case the software does not support any output, you can skip this field or use application/x.empty"
                                nullable: true
                            applicationSuite:
                                _list: '/admin/objects?_self.schema.id=0c2655fb-db80-49ff-b1f0-662bf85b89e0'
                                type: object
                                nullable: true
                            url:
                                _list: '/admin/objects?_self.schema.id=5bd31d2f-fe14-4a1a-94f9-263f747e4485'
                                type: object
                                nullable: true
                            usedBy:
                                _list: '/admin/objects?_self.schema.id=fcc4e57c-f5e2-4527-b8ea-68b9d9bcf50a'
                                type: object
                                description: "A list of the names of prominent public administrations (that will serve as 'testimonials') that are currently known to the software maintainer to be using this software.\n\nParsers are encouraged to enhance this list also with other information that can obtain independently; for instance, a fork of a software, owned by an administration, could be used as a signal of usage of the software."
                                nullable: true
                                multiple: true
                            intendedAudience:
                                _list: '/admin/objects?_self.schema.id=a22a918f-7fac-4395-becb-fbed741ceeea'
                                type: object
                                nullable: true
                            description:
                                _list: '/admin/objects?_self.schema.id=c6b0dd59-1ba2-49f9-8071-61dde39bb5e5'
                                type: object
                                nullable: true
                            legal:
                                _list: '/admin/objects?_self.schema.id=60dc635f-5c92-41b9-957c-f33f17d45f6b'
                                type: object
                                nullable: true
                            maintenance:
                                _list: '/admin/objects?_self.schema.id=1c2c1c24-d6b5-4f43-9eab-a3029e27d9d7'
                                type: object
                                nullable: true
                            localisation:
                                _list: '/admin/objects?_self.schema.id=c7b42d57-3011-4b71-adfc-3f28d4fd6420'
                                type: object
                                nullable: true
                            dependsOn:
                                _list: '/admin/objects?_self.schema.id=3c262092-4617-486c-ba81-165243689ef3'
                                type: object
                                nullable: true
                            nl:
                                _list: '/admin/objects?_self.schema.id=aed2f0ec-7fcc-48db-a0f6-8be16be44e59'
                                type: object
                                nullable: true
                            rating:
                                _list: '/admin/objects?_self.schema.id=cff7ef6c-7b07-4a3a-9596-b2db1a2ac163'
                                type: object
                                nullable: true
                -
                    name: owns
                    in: query
                    description: 'A list of  components supported by this organisation'
                    required: false
                    schema:
                        type: object
                        properties:
                            applicationId:
                                type: string
                                example: '487842915'
                                nullable: true
                            name:
                                type: string
                                description: 'This key contains the name of the software. It contains the (short) public name of the product, which can be localised in the specific localisation section. It should be the name most people usually refer to the software. In case the software has both an internal ''code'' name and a commercial name, use the commercial name.'
                                example: Medusa
                                nullable: true
                            landingURL:
                                type: string
                                format: url
                                description: 'If the url parameter does not serve a human readable or browsable page, but only serves source code to a source control client, with this key you have an option to specify a landing page. This page, ideally, is where your users will land when they will click a button labeled something like ''Go to the application source code''. In case the product provides an automated graphical installer, this URL can point to a page which contains a reference to the source code but also offers the download of such an installer.'
                                example: 'https://example.com/italia/medusa'
                                nullable: true
                            isBasedOn:
                                type: string
                                description: "In case this software is a variant or a fork of another software, which might or might not contain a publiccode.yml file, this key will contain the url of the original project(s).\n\nThe existence of this key identifies the fork as a software variant, descending from the specified repositories."
                                example: 'https://github.com/italia/otello.git'
                                nullable: true
                            softwareVersion:
                                type: string
                                description: "This key contains the latest stable version number of the software. The version number is a string that is not meant to be interpreted and parsed but just displayed; parsers should not assume semantic versioning or any other specific version format.\n\nThe key can be omitted if the software is currently in initial development and has never been released yet."
                                example: '1.0'
                                nullable: true
                            releaseDate:
                                type: string
                                format: date
                                description: 'This key contains the date at which the latest version was released. This date is mandatory if the software has been released at least once and thus the version number is present.'
                                example: '2022-01-01'
                                nullable: true
                            logo:
                                type: string
                                description: 'This key contains the path to the logo of the software. Logos should be in vector format; raster formats are only allowed as a fallback. In this case, they should be transparent PNGs, minimum 1000px of width. The key value can be the relative path to the file starting from the root of the repository, or it can be an absolute URL pointing to the logo in raw version. In both cases, the file must reside inside the same repository where the publiccode.yml file is stored.'
                                example: 'https://avatars0.githubusercontent.com/u/34739001?s=280&v=4'
                                nullable: true
                            platforms:
                                type: array
                                description: "This key specifies which platform the software runs on. It is meant to describe the platforms that users will use to access and operate the software, rather than the platform the software itself runs on.\n\nUse the predefined values if possible. If the software runs on a platform for which a predefined value is not available, a different value can be used."
                                nullable: true
                            categories:
                                type: array
                                description: "A list of words that can be used to describe the software and can help building catalogs of open software.\n\nThe controlled vocabulary List of software categories contains the list of allowed values."
                                nullable: true
                            roadmap:
                                type: string
                                format: url
                                description: 'A link to a public roadmap of the software.'
                                example: 'https://vng.nl/agenda'
                                nullable: true
                            developmentStatus:
                                type: string
                                description: "The keys are:\n\n\n-  concept - The software is just a 'concept'. No actual code may have been produced, and the repository could simply be a placeholder.\n- development - Some effort has gone into the development of the software, but the code is not ready for the end user, even in a preliminary version (beta or alpha) to be tested by end users.\n- beta - The software is in the testing phase (alpha or beta). At this stage, the software might or might not have had a preliminary public release.\n- stable - The software has seen a first public release and is ready to be used in a production environment.\n- obsolete - The software is no longer maintained or kept up to date. All of the source code is archived and kept for historical reasons."
                                example: concept
                                enum:
                                    - concept
                                    - development
                                    - beta
                                    - stable
                                    - obsolete
                                nullable: true
                            softwareType:
                                type: string
                                description: "The keys are:\n\n- standalone/mobile - The software is a standalone, self-contained The software is a native mobile app.\n- standalone/iot - The software is suitable for an IoT context.\n- standalone/desktop - The software is typically installed and run in a a desktop operating system environment.\n- standalone/web - The software represents a web application usable by means of a browser.\n- standalone/backend - The software is a backend application.\n- standalone/other - The software has a different nature from the once listed above.\n- softwareAddon - The software is an addon, such as a plugin or a theme, for a more complex software (e.g. a CMS or an office suite).\n-  library - The software contains a library or an SDK to make it easier to third party developers to create new products.\n- configurationFiles - The software does not contain executable script but a set of configuration files. They may document how to obtain a certain deployment. They could be in the form of plain configuration files, bash scripts, ansible playbooks, Dockerfiles, or other instruction sets."
                                example: standalone/web
                                enum:
                                    - standalone/mobile
                                    - standalone/iot
                                    - standalone/desktop
                                    - standalone/web
                                    - standalone/backend
                                    - standalone/other
                                    - softwareAddon
                                    - library
                                    - configurationFiles
                                    - api
                                    - schema
                                    - data
                                    - process
                                    - model
                                nullable: true
                            inputTypes:
                                type: array
                                description: "A list of Media Types (MIME Types) as mandated in RFC 6838 which the application can handle as input.\n\nIn case the software does not support any input, you can skip this field or use application/x.empty"
                                nullable: true
                            outputTypes:
                                type: array
                                description: "A list of Media Types (MIME Types) as mandated in RFC 6838 which the application can handle as output.\n\nIn case the software does not support any output, you can skip this field or use application/x.empty"
                                nullable: true
                            applicationSuite:
                                _list: '/admin/objects?_self.schema.id=0c2655fb-db80-49ff-b1f0-662bf85b89e0'
                                type: object
                                nullable: true
                            url:
                                _list: '/admin/objects?_self.schema.id=5bd31d2f-fe14-4a1a-94f9-263f747e4485'
                                type: object
                                nullable: true
                            usedBy:
                                _list: '/admin/objects?_self.schema.id=fcc4e57c-f5e2-4527-b8ea-68b9d9bcf50a'
                                type: object
                                description: "A list of the names of prominent public administrations (that will serve as 'testimonials') that are currently known to the software maintainer to be using this software.\n\nParsers are encouraged to enhance this list also with other information that can obtain independently; for instance, a fork of a software, owned by an administration, could be used as a signal of usage of the software."
                                nullable: true
                                multiple: true
                            intendedAudience:
                                _list: '/admin/objects?_self.schema.id=a22a918f-7fac-4395-becb-fbed741ceeea'
                                type: object
                                nullable: true
                            description:
                                _list: '/admin/objects?_self.schema.id=c6b0dd59-1ba2-49f9-8071-61dde39bb5e5'
                                type: object
                                nullable: true
                            legal:
                                _list: '/admin/objects?_self.schema.id=60dc635f-5c92-41b9-957c-f33f17d45f6b'
                                type: object
                                nullable: true
                            maintenance:
                                _list: '/admin/objects?_self.schema.id=1c2c1c24-d6b5-4f43-9eab-a3029e27d9d7'
                                type: object
                                nullable: true
                            localisation:
                                _list: '/admin/objects?_self.schema.id=c7b42d57-3011-4b71-adfc-3f28d4fd6420'
                                type: object
                                nullable: true
                            dependsOn:
                                _list: '/admin/objects?_self.schema.id=3c262092-4617-486c-ba81-165243689ef3'
                                type: object
                                nullable: true
                            nl:
                                _list: '/admin/objects?_self.schema.id=aed2f0ec-7fcc-48db-a0f6-8be16be44e59'
                                type: object
                                nullable: true
                            rating:
                                _list: '/admin/objects?_self.schema.id=cff7ef6c-7b07-4a3a-9596-b2db1a2ac163'
                                type: object
                                nullable: true
                -
                    name: uses
                    in: query
                    description: 'A list of  components supported by this organisation'
                    required: false
                    schema:
                        type: object
                        properties:
                            applicationId:
                                type: string
                                example: '487842915'
                                nullable: true
                            name:
                                type: string
                                description: 'This key contains the name of the software. It contains the (short) public name of the product, which can be localised in the specific localisation section. It should be the name most people usually refer to the software. In case the software has both an internal ''code'' name and a commercial name, use the commercial name.'
                                example: Medusa
                                nullable: true
                            landingURL:
                                type: string
                                format: url
                                description: 'If the url parameter does not serve a human readable or browsable page, but only serves source code to a source control client, with this key you have an option to specify a landing page. This page, ideally, is where your users will land when they will click a button labeled something like ''Go to the application source code''. In case the product provides an automated graphical installer, this URL can point to a page which contains a reference to the source code but also offers the download of such an installer.'
                                example: 'https://example.com/italia/medusa'
                                nullable: true
                            isBasedOn:
                                type: string
                                description: "In case this software is a variant or a fork of another software, which might or might not contain a publiccode.yml file, this key will contain the url of the original project(s).\n\nThe existence of this key identifies the fork as a software variant, descending from the specified repositories."
                                example: 'https://github.com/italia/otello.git'
                                nullable: true
                            softwareVersion:
                                type: string
                                description: "This key contains the latest stable version number of the software. The version number is a string that is not meant to be interpreted and parsed but just displayed; parsers should not assume semantic versioning or any other specific version format.\n\nThe key can be omitted if the software is currently in initial development and has never been released yet."
                                example: '1.0'
                                nullable: true
                            releaseDate:
                                type: string
                                format: date
                                description: 'This key contains the date at which the latest version was released. This date is mandatory if the software has been released at least once and thus the version number is present.'
                                example: '2022-01-01'
                                nullable: true
                            logo:
                                type: string
                                description: 'This key contains the path to the logo of the software. Logos should be in vector format; raster formats are only allowed as a fallback. In this case, they should be transparent PNGs, minimum 1000px of width. The key value can be the relative path to the file starting from the root of the repository, or it can be an absolute URL pointing to the logo in raw version. In both cases, the file must reside inside the same repository where the publiccode.yml file is stored.'
                                example: 'https://avatars0.githubusercontent.com/u/34739001?s=280&v=4'
                                nullable: true
                            platforms:
                                type: array
                                description: "This key specifies which platform the software runs on. It is meant to describe the platforms that users will use to access and operate the software, rather than the platform the software itself runs on.\n\nUse the predefined values if possible. If the software runs on a platform for which a predefined value is not available, a different value can be used."
                                nullable: true
                            categories:
                                type: array
                                description: "A list of words that can be used to describe the software and can help building catalogs of open software.\n\nThe controlled vocabulary List of software categories contains the list of allowed values."
                                nullable: true
                            roadmap:
                                type: string
                                format: url
                                description: 'A link to a public roadmap of the software.'
                                example: 'https://vng.nl/agenda'
                                nullable: true
                            developmentStatus:
                                type: string
                                description: "The keys are:\n\n\n-  concept - The software is just a 'concept'. No actual code may have been produced, and the repository could simply be a placeholder.\n- development - Some effort has gone into the development of the software, but the code is not ready for the end user, even in a preliminary version (beta or alpha) to be tested by end users.\n- beta - The software is in the testing phase (alpha or beta). At this stage, the software might or might not have had a preliminary public release.\n- stable - The software has seen a first public release and is ready to be used in a production environment.\n- obsolete - The software is no longer maintained or kept up to date. All of the source code is archived and kept for historical reasons."
                                example: concept
                                enum:
                                    - concept
                                    - development
                                    - beta
                                    - stable
                                    - obsolete
                                nullable: true
                            softwareType:
                                type: string
                                description: "The keys are:\n\n- standalone/mobile - The software is a standalone, self-contained The software is a native mobile app.\n- standalone/iot - The software is suitable for an IoT context.\n- standalone/desktop - The software is typically installed and run in a a desktop operating system environment.\n- standalone/web - The software represents a web application usable by means of a browser.\n- standalone/backend - The software is a backend application.\n- standalone/other - The software has a different nature from the once listed above.\n- softwareAddon - The software is an addon, such as a plugin or a theme, for a more complex software (e.g. a CMS or an office suite).\n-  library - The software contains a library or an SDK to make it easier to third party developers to create new products.\n- configurationFiles - The software does not contain executable script but a set of configuration files. They may document how to obtain a certain deployment. They could be in the form of plain configuration files, bash scripts, ansible playbooks, Dockerfiles, or other instruction sets."
                                example: standalone/web
                                enum:
                                    - standalone/mobile
                                    - standalone/iot
                                    - standalone/desktop
                                    - standalone/web
                                    - standalone/backend
                                    - standalone/other
                                    - softwareAddon
                                    - library
                                    - configurationFiles
                                    - api
                                    - schema
                                    - data
                                    - process
                                    - model
                                nullable: true
                            inputTypes:
                                type: array
                                description: "A list of Media Types (MIME Types) as mandated in RFC 6838 which the application can handle as input.\n\nIn case the software does not support any input, you can skip this field or use application/x.empty"
                                nullable: true
                            outputTypes:
                                type: array
                                description: "A list of Media Types (MIME Types) as mandated in RFC 6838 which the application can handle as output.\n\nIn case the software does not support any output, you can skip this field or use application/x.empty"
                                nullable: true
                            applicationSuite:
                                _list: '/admin/objects?_self.schema.id=0c2655fb-db80-49ff-b1f0-662bf85b89e0'
                                type: object
                                nullable: true
                            url:
                                _list: '/admin/objects?_self.schema.id=5bd31d2f-fe14-4a1a-94f9-263f747e4485'
                                type: object
                                nullable: true
                            usedBy:
                                _list: '/admin/objects?_self.schema.id=fcc4e57c-f5e2-4527-b8ea-68b9d9bcf50a'
                                type: object
                                description: "A list of the names of prominent public administrations (that will serve as 'testimonials') that are currently known to the software maintainer to be using this software.\n\nParsers are encouraged to enhance this list also with other information that can obtain independently; for instance, a fork of a software, owned by an administration, could be used as a signal of usage of the software."
                                nullable: true
                                multiple: true
                            intendedAudience:
                                _list: '/admin/objects?_self.schema.id=a22a918f-7fac-4395-becb-fbed741ceeea'
                                type: object
                                nullable: true
                            description:
                                _list: '/admin/objects?_self.schema.id=c6b0dd59-1ba2-49f9-8071-61dde39bb5e5'
                                type: object
                                nullable: true
                            legal:
                                _list: '/admin/objects?_self.schema.id=60dc635f-5c92-41b9-957c-f33f17d45f6b'
                                type: object
                                nullable: true
                            maintenance:
                                _list: '/admin/objects?_self.schema.id=1c2c1c24-d6b5-4f43-9eab-a3029e27d9d7'
                                type: object
                                nullable: true
                            localisation:
                                _list: '/admin/objects?_self.schema.id=c7b42d57-3011-4b71-adfc-3f28d4fd6420'
                                type: object
                                nullable: true
                            dependsOn:
                                _list: '/admin/objects?_self.schema.id=3c262092-4617-486c-ba81-165243689ef3'
                                type: object
                                nullable: true
                            nl:
                                _list: '/admin/objects?_self.schema.id=aed2f0ec-7fcc-48db-a0f6-8be16be44e59'
                                type: object
                                nullable: true
                            rating:
                                _list: '/admin/objects?_self.schema.id=cff7ef6c-7b07-4a3a-9596-b2db1a2ac163'
                                type: object
                                nullable: true
        post:
            operationId: organisation-post-item
            summary: Organisation
            tags:
                - organisation
            description: 'extension of the publiccode standard '
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Organisation'
                    application/xml:
                        schema:
                            $ref: '#/components/schemas/Organisation'
            responses:
                200:
                    description: 'extension of the publiccode standard '
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Organisation'
                        application/xml:
                            schema:
                                $ref: '#/components/schemas/Organisation'
    '/applications/{id}':
        get:
            operationId: application-get-item
            summary: Application
            tags:
                - application
            description: ''
            parameters:
                -
                    name: id
                    in: path
                    description: ''
                    required: true
                    schema:
                        type: string
            responses:
                200:
                    description: ''
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Application'
                        application/xml:
                            schema:
                                $ref: '#/components/schemas/Application'
        put:
            operationId: application-put-item
            summary: Application
            tags:
                - application
            description: ''
            parameters:
                -
                    name: id
                    in: path
                    description: ''
                    required: true
                    schema:
                        type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Application'
                    application/xml:
                        schema:
                            $ref: '#/components/schemas/Application'
            responses:
                200:
                    description: ''
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Application'
                        application/xml:
                            schema:
                                $ref: '#/components/schemas/Application'
        patch:
            operationId: application-patch-item
            summary: Application
            tags:
                - application
            description: ''
            parameters:
                -
                    name: id
                    in: path
                    description: ''
                    required: true
                    schema:
                        type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Application'
                    application/xml:
                        schema:
                            $ref: '#/components/schemas/Application'
            responses:
                200:
                    description: ''
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Application'
                        application/xml:
                            schema:
                                $ref: '#/components/schemas/Application'
        delete:
            operationId: application-delete-item
            summary: Application
            tags:
                - application
            description: ''
            parameters:
                -
                    name: id
                    in: path
                    description: ''
                    required: true
                    schema:
                        type: string
            responses:
                200:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: string
                                example: 'Object is successfully deleted'
                        application/xml:
                            schema:
                                type: string
                                example: 'Object is successfully deleted'
    /applications:
        get:
            operationId: application-get-collection
            summary: Application
            tags:
                - application
            description: ''
            responses:
                200:
                    description: OK
                    content:
                        application/json:
                            schema:
                                required:
                                    - count
                                    - results
                                type: object
                                properties:
                                    count:
                                        type: integer
                                        example: 1
                                    next:
                                        type: string
                                        format: uri
                                        nullable: true
                                    previous:
                                        type: string
                                        format: uri
                                        nullable: true
                                    results:
                                        type: array
                                        items: { $ref: '#/components/schemas/Application' }
                        application/xml:
                            schema:
                                required:
                                    - count
                                    - results
                                type: object
                                properties:
                                    count:
                                        type: integer
                                        example: 1
                                    next:
                                        type: string
                                        format: uri
                                        nullable: true
                                    previous:
                                        type: string
                                        format: uri
                                        nullable: true
                                    results:
                                        type: array
                                        items: { $ref: '#/components/schemas/Application' }
            parameters:
                -
                    name: name
                    in: query
                    description: ''
                    required: true
                    schema:
                        type: string
                -
                    name: shortDescription
                    in: query
                    description: ''
                    required: false
                    schema:
                        type: string
                -
                    name: description
                    in: query
                    description: ''
                    required: false
                    schema:
                        type: string
                -
                    name: detailPageImageUrl
                    in: query
                    description: ''
                    required: false
                    schema:
                        type: string
                -
                    name: documentationUrl
                    in: query
                    description: ''
                    required: false
                    schema:
                        type: string
                -
                    name: demoUrl
                    in: query
                    description: ''
                    required: false
                    schema:
                        type: string
                -
                    name: bpmnProcessUrl
                    in: query
                    description: ''
                    required: false
                    schema:
                        type: string
                -
                    name: isPublished
                    in: query
                    description: ''
                    required: false
                    schema:
                        type: boolean
                -
                    name: owner
                    in: query
                    description: ''
                    required: false
                    schema:
                        type: object
                        properties:
                            fullName:
                                type: string
                                nullable: true
                            email:
                                type: string
                                nullable: true
                            pictureUrl:
                                type: string
                                nullable: true
                -
                    name: components
                    in: query
                    description: ''
                    required: false
                    schema:
                        type: object
                        properties:
                            applicationId:
                                type: string
                                example: '487842915'
                                nullable: true
                            name:
                                type: string
                                description: 'This key contains the name of the software. It contains the (short) public name of the product, which can be localised in the specific localisation section. It should be the name most people usually refer to the software. In case the software has both an internal ''code'' name and a commercial name, use the commercial name.'
                                example: Medusa
                                nullable: true
                            landingURL:
                                type: string
                                format: url
                                description: 'If the url parameter does not serve a human readable or browsable page, but only serves source code to a source control client, with this key you have an option to specify a landing page. This page, ideally, is where your users will land when they will click a button labeled something like ''Go to the application source code''. In case the product provides an automated graphical installer, this URL can point to a page which contains a reference to the source code but also offers the download of such an installer.'
                                example: 'https://example.com/italia/medusa'
                                nullable: true
                            isBasedOn:
                                type: string
                                description: "In case this software is a variant or a fork of another software, which might or might not contain a publiccode.yml file, this key will contain the url of the original project(s).\n\nThe existence of this key identifies the fork as a software variant, descending from the specified repositories."
                                example: 'https://github.com/italia/otello.git'
                                nullable: true
                            softwareVersion:
                                type: string
                                description: "This key contains the latest stable version number of the software. The version number is a string that is not meant to be interpreted and parsed but just displayed; parsers should not assume semantic versioning or any other specific version format.\n\nThe key can be omitted if the software is currently in initial development and has never been released yet."
                                example: '1.0'
                                nullable: true
                            releaseDate:
                                type: string
                                format: date
                                description: 'This key contains the date at which the latest version was released. This date is mandatory if the software has been released at least once and thus the version number is present.'
                                example: '2022-01-01'
                                nullable: true
                            logo:
                                type: string
                                description: 'This key contains the path to the logo of the software. Logos should be in vector format; raster formats are only allowed as a fallback. In this case, they should be transparent PNGs, minimum 1000px of width. The key value can be the relative path to the file starting from the root of the repository, or it can be an absolute URL pointing to the logo in raw version. In both cases, the file must reside inside the same repository where the publiccode.yml file is stored.'
                                example: 'https://avatars0.githubusercontent.com/u/34739001?s=280&v=4'
                                nullable: true
                            platforms:
                                type: array
                                description: "This key specifies which platform the software runs on. It is meant to describe the platforms that users will use to access and operate the software, rather than the platform the software itself runs on.\n\nUse the predefined values if possible. If the software runs on a platform for which a predefined value is not available, a different value can be used."
                                nullable: true
                            categories:
                                type: array
                                description: "A list of words that can be used to describe the software and can help building catalogs of open software.\n\nThe controlled vocabulary List of software categories contains the list of allowed values."
                                nullable: true
                            roadmap:
                                type: string
                                format: url
                                description: 'A link to a public roadmap of the software.'
                                example: 'https://vng.nl/agenda'
                                nullable: true
                            developmentStatus:
                                type: string
                                description: "The keys are:\n\n\n-  concept - The software is just a 'concept'. No actual code may have been produced, and the repository could simply be a placeholder.\n- development - Some effort has gone into the development of the software, but the code is not ready for the end user, even in a preliminary version (beta or alpha) to be tested by end users.\n- beta - The software is in the testing phase (alpha or beta). At this stage, the software might or might not have had a preliminary public release.\n- stable - The software has seen a first public release and is ready to be used in a production environment.\n- obsolete - The software is no longer maintained or kept up to date. All of the source code is archived and kept for historical reasons."
                                example: concept
                                enum:
                                    - concept
                                    - development
                                    - beta
                                    - stable
                                    - obsolete
                                nullable: true
                            softwareType:
                                type: string
                                description: "The keys are:\n\n- standalone/mobile - The software is a standalone, self-contained The software is a native mobile app.\n- standalone/iot - The software is suitable for an IoT context.\n- standalone/desktop - The software is typically installed and run in a a desktop operating system environment.\n- standalone/web - The software represents a web application usable by means of a browser.\n- standalone/backend - The software is a backend application.\n- standalone/other - The software has a different nature from the once listed above.\n- softwareAddon - The software is an addon, such as a plugin or a theme, for a more complex software (e.g. a CMS or an office suite).\n-  library - The software contains a library or an SDK to make it easier to third party developers to create new products.\n- configurationFiles - The software does not contain executable script but a set of configuration files. They may document how to obtain a certain deployment. They could be in the form of plain configuration files, bash scripts, ansible playbooks, Dockerfiles, or other instruction sets."
                                example: standalone/web
                                enum:
                                    - standalone/mobile
                                    - standalone/iot
                                    - standalone/desktop
                                    - standalone/web
                                    - standalone/backend
                                    - standalone/other
                                    - softwareAddon
                                    - library
                                    - configurationFiles
                                    - api
                                    - schema
                                    - data
                                    - process
                                    - model
                                nullable: true
                            inputTypes:
                                type: array
                                description: "A list of Media Types (MIME Types) as mandated in RFC 6838 which the application can handle as input.\n\nIn case the software does not support any input, you can skip this field or use application/x.empty"
                                nullable: true
                            outputTypes:
                                type: array
                                description: "A list of Media Types (MIME Types) as mandated in RFC 6838 which the application can handle as output.\n\nIn case the software does not support any output, you can skip this field or use application/x.empty"
                                nullable: true
                            applicationSuite:
                                _list: '/admin/objects?_self.schema.id=0c2655fb-db80-49ff-b1f0-662bf85b89e0'
                                type: object
                                nullable: true
                            url:
                                _list: '/admin/objects?_self.schema.id=5bd31d2f-fe14-4a1a-94f9-263f747e4485'
                                type: object
                                nullable: true
                            usedBy:
                                _list: '/admin/objects?_self.schema.id=fcc4e57c-f5e2-4527-b8ea-68b9d9bcf50a'
                                type: object
                                description: "A list of the names of prominent public administrations (that will serve as 'testimonials') that are currently known to the software maintainer to be using this software.\n\nParsers are encouraged to enhance this list also with other information that can obtain independently; for instance, a fork of a software, owned by an administration, could be used as a signal of usage of the software."
                                nullable: true
                                multiple: true
                            intendedAudience:
                                _list: '/admin/objects?_self.schema.id=a22a918f-7fac-4395-becb-fbed741ceeea'
                                type: object
                                nullable: true
                            description:
                                _list: '/admin/objects?_self.schema.id=c6b0dd59-1ba2-49f9-8071-61dde39bb5e5'
                                type: object
                                nullable: true
                            legal:
                                _list: '/admin/objects?_self.schema.id=60dc635f-5c92-41b9-957c-f33f17d45f6b'
                                type: object
                                nullable: true
                            maintenance:
                                _list: '/admin/objects?_self.schema.id=1c2c1c24-d6b5-4f43-9eab-a3029e27d9d7'
                                type: object
                                nullable: true
                            localisation:
                                _list: '/admin/objects?_self.schema.id=c7b42d57-3011-4b71-adfc-3f28d4fd6420'
                                type: object
                                nullable: true
                            dependsOn:
                                _list: '/admin/objects?_self.schema.id=3c262092-4617-486c-ba81-165243689ef3'
                                type: object
                                nullable: true
                            nl:
                                _list: '/admin/objects?_self.schema.id=aed2f0ec-7fcc-48db-a0f6-8be16be44e59'
                                type: object
                                nullable: true
                            rating:
                                _list: '/admin/objects?_self.schema.id=cff7ef6c-7b07-4a3a-9596-b2db1a2ac163'
                                type: object
                                nullable: true
        post:
            operationId: application-post-item
            summary: Application
            tags:
                - application
            description: ''
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Application'
                    application/xml:
                        schema:
                            $ref: '#/components/schemas/Application'
            responses:
                200:
                    description: ''
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Application'
                        application/xml:
                            schema:
                                $ref: '#/components/schemas/Application'
    '/catalogi/{id}':
        get:
            operationId: catalogi-get-item
            summary: Catalogi
            tags:
                - catalogi
            description: ''
            parameters:
                -
                    name: id
                    in: path
                    description: ''
                    required: true
                    schema:
                        type: string
            responses:
                200:
                    description: ''
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Catalogi'
                        application/xml:
                            schema:
                                $ref: '#/components/schemas/Catalogi'
        put:
            operationId: catalogi-put-item
            summary: Catalogi
            tags:
                - catalogi
            description: ''
            parameters:
                -
                    name: id
                    in: path
                    description: ''
                    required: true
                    schema:
                        type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Catalogi'
                    application/xml:
                        schema:
                            $ref: '#/components/schemas/Catalogi'
            responses:
                200:
                    description: ''
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Catalogi'
                        application/xml:
                            schema:
                                $ref: '#/components/schemas/Catalogi'
        patch:
            operationId: catalogi-patch-item
            summary: Catalogi
            tags:
                - catalogi
            description: ''
            parameters:
                -
                    name: id
                    in: path
                    description: ''
                    required: true
                    schema:
                        type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Catalogi'
                    application/xml:
                        schema:
                            $ref: '#/components/schemas/Catalogi'
            responses:
                200:
                    description: ''
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Catalogi'
                        application/xml:
                            schema:
                                $ref: '#/components/schemas/Catalogi'
        delete:
            operationId: catalogi-delete-item
            summary: Catalogi
            tags:
                - catalogi
            description: ''
            parameters:
                -
                    name: id
                    in: path
                    description: ''
                    required: true
                    schema:
                        type: string
            responses:
                200:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: string
                                example: 'Object is successfully deleted'
                        application/xml:
                            schema:
                                type: string
                                example: 'Object is successfully deleted'
    /catalogi:
        get:
            operationId: catalogi-get-collection
            summary: Catalogi
            tags:
                - catalogi
            description: ''
            responses:
                200:
                    description: OK
                    content:
                        application/json:
                            schema:
                                required:
                                    - count
                                    - results
                                type: object
                                properties:
                                    count:
                                        type: integer
                                        example: 1
                                    next:
                                        type: string
                                        format: uri
                                        nullable: true
                                    previous:
                                        type: string
                                        format: uri
                                        nullable: true
                                    results:
                                        type: array
                                        items: { $ref: '#/components/schemas/Catalogi' }
                        application/xml:
                            schema:
                                required:
                                    - count
                                    - results
                                type: object
                                properties:
                                    count:
                                        type: integer
                                        example: 1
                                    next:
                                        type: string
                                        format: uri
                                        nullable: true
                                    previous:
                                        type: string
                                        format: uri
                                        nullable: true
                                    results:
                                        type: array
                                        items: { $ref: '#/components/schemas/Catalogi' }
            parameters:
                -
                    name: rsin
                    in: query
                    description: ''
                    required: false
                    schema:
                        type: string
                -
                    name: pki
                    in: query
                    description: ''
                    required: false
                    schema:
                        type: string
                -
                    name: source
                    in: query
                    description: ''
                    required: false
                    schema:
                        type: object
                        properties:
                            name:
                                type: string
                                nullable: true
                            description:
                                type: string
                                nullable: true
                            location:
                                type: string
                                nullable: true
                -
                    name: organisation
                    in: query
                    description: ''
                    required: false
                    schema:
                        type: object
                        properties:
                            name:
                                type: string
                                nullable: true
                            description:
                                type: string
                                nullable: true
                            logo:
                                type: string
                                format: uri
                                description: 'The logo of this organisation'
                                nullable: true
                            token:
                                type: string
                                description: 'An optional NL-Design token that contains the organisations style'
                                nullable: true
                            github:
                                type: string
                                format: url
                                description: 'A link the the organisations github '
                                nullable: true
                            gitlab:
                                type: string
                                format: url
                                description: 'A link to the organisations gitlab'
                                nullable: true
                            website:
                                type: string
                                nullable: true
                            phone:
                                type: string
                                nullable: true
                            email:
                                type: string
                                nullable: true
                            type:
                                type: string
                                description: 'The type of this organisation'
                                example: public
                                enum:
                                    - public
                                    - private
                                    - unkown
                                nullable: true
                            catalogusAPI:
                                type: string
                                format: uri
                                nullable: true
                            supports:
                                _list: '/admin/objects?_self.schema.id=8ef831a8-8ed4-42d7-977a-48b690244f4a'
                                type: object
                                description: 'A list of  components supported by this organisation'
                                nullable: true
                                multiple: true
                            owns:
                                _list: '/admin/objects?_self.schema.id=8ef831a8-8ed4-42d7-977a-48b690244f4a'
                                type: object
                                description: 'A list of  components supported by this organisation'
                                nullable: true
                                multiple: true
                            uses:
                                _list: '/admin/objects?_self.schema.id=8ef831a8-8ed4-42d7-977a-48b690244f4a'
                                type: object
                                description: 'A list of  components supported by this organisation'
                                nullable: true
                                multiple: true
        post:
            operationId: catalogi-post-item
            summary: Catalogi
            tags:
                - catalogi
            description: ''
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Catalogi'
                    application/xml:
                        schema:
                            $ref: '#/components/schemas/Catalogi'
            responses:
                200:
                    description: ''
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Catalogi'
                        application/xml:
                            schema:
                                $ref: '#/components/schemas/Catalogi'
    '/repositories/{id}':
        get:
            operationId: repository-get-item
            summary: Repository
            tags:
                - repository
            description: ''
            parameters:
                -
                    name: id
                    in: path
                    description: ''
                    required: true
                    schema:
                        type: string
            responses:
                200:
                    description: ''
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Repository'
                        application/xml:
                            schema:
                                $ref: '#/components/schemas/Repository'
        put:
            operationId: repository-put-item
            summary: Repository
            tags:
                - repository
            description: ''
            parameters:
                -
                    name: id
                    in: path
                    description: ''
                    required: true
                    schema:
                        type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Repository'
                    application/xml:
                        schema:
                            $ref: '#/components/schemas/Repository'
            responses:
                200:
                    description: ''
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Repository'
                        application/xml:
                            schema:
                                $ref: '#/components/schemas/Repository'
        patch:
            operationId: repository-patch-item
            summary: Repository
            tags:
                - repository
            description: ''
            parameters:
                -
                    name: id
                    in: path
                    description: ''
                    required: true
                    schema:
                        type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Repository'
                    application/xml:
                        schema:
                            $ref: '#/components/schemas/Repository'
            responses:
                200:
                    description: ''
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Repository'
                        application/xml:
                            schema:
                                $ref: '#/components/schemas/Repository'
        delete:
            operationId: repository-delete-item
            summary: Repository
            tags:
                - repository
            description: ''
            parameters:
                -
                    name: id
                    in: path
                    description: ''
                    required: true
                    schema:
                        type: string
            responses:
                200:
                    description: ''
                    content:
                        application/json:
                            schema:
                                type: string
                                example: 'Object is successfully deleted'
                        application/xml:
                            schema:
                                type: string
                                example: 'Object is successfully deleted'
    /repositories:
        get:
            operationId: repository-get-collection
            summary: Repository
            tags:
                - repository
            description: ''
            responses:
                200:
                    description: OK
                    content:
                        application/json:
                            schema:
                                required:
                                    - count
                                    - results
                                type: object
                                properties:
                                    count:
                                        type: integer
                                        example: 1
                                    next:
                                        type: string
                                        format: uri
                                        nullable: true
                                    previous:
                                        type: string
                                        format: uri
                                        nullable: true
                                    results:
                                        type: array
                                        items: { $ref: '#/components/schemas/Repository' }
                        application/xml:
                            schema:
                                required:
                                    - count
                                    - results
                                type: object
                                properties:
                                    count:
                                        type: integer
                                        example: 1
                                    next:
                                        type: string
                                        format: uri
                                        nullable: true
                                    previous:
                                        type: string
                                        format: uri
                                        nullable: true
                                    results:
                                        type: array
                                        items: { $ref: '#/components/schemas/Repository' }
            parameters:
                -
                    name: source
                    in: query
                    description: ''
                    required: false
                    schema:
                        type: string
                -
                    name: name
                    in: query
                    description: ''
                    required: false
                    schema:
                        type: string
                -
                    name: url
                    in: query
                    description: ''
                    required: false
                    schema:
                        type: string
                -
                    name: avatar_url
                    in: query
                    description: ''
                    required: false
                    schema:
                        type: string
                -
                    name: last_change
                    in: query
                    description: ''
                    required: false
                    schema:
                        type: string
                -
                    name: stars
                    in: query
                    description: ''
                    required: false
                    schema:
                        type: number
                -
                    name: fork_count
                    in: query
                    description: ''
                    required: false
                    schema:
                        type: number
                -
                    name: issue_open_count
                    in: query
                    description: ''
                    required: false
                    schema:
                        type: number
                -
                    name: merge_request_open_count
                    in: query
                    description: ''
                    required: false
                    schema:
                        type: number
                -
                    name: 'programming_languages[]'
                    in: query
                    description: ''
                    required: false
                    schema:
                        type: array
                        items:
                            type: string
                -
                    name: 'topics[]'
                    in: query
                    description: ''
                    required: false
                    schema:
                        type: array
                        items:
                            type: string
                -
                    name: content
                    in: query
                    description: ''
                    required: false
                    schema:
                        type: string
                -
                    name: publiccode_url
                    in: query
                    description: ''
                    required: false
                    schema:
                        type: string
                -
                    name: default_owner
                    in: query
                    description: ''
                    required: false
                    schema:
                        type: string
                -
                    name: organisation
                    in: query
                    description: ''
                    required: false
                    schema:
                        type: object
                        properties:
                            name:
                                type: string
                                nullable: true
                            description:
                                type: string
                                nullable: true
                            logo:
                                type: string
                                format: uri
                                description: 'The logo of this organisation'
                                nullable: true
                            token:
                                type: string
                                description: 'An optional NL-Design token that contains the organisations style'
                                nullable: true
                            github:
                                type: string
                                format: url
                                description: 'A link the the organisations github '
                                nullable: true
                            gitlab:
                                type: string
                                format: url
                                description: 'A link to the organisations gitlab'
                                nullable: true
                            website:
                                type: string
                                nullable: true
                            phone:
                                type: string
                                nullable: true
                            email:
                                type: string
                                nullable: true
                            type:
                                type: string
                                description: 'The type of this organisation'
                                example: public
                                enum:
                                    - public
                                    - private
                                    - unkown
                                nullable: true
                            catalogusAPI:
                                type: string
                                format: uri
                                nullable: true
                            supports:
                                _list: '/admin/objects?_self.schema.id=8ef831a8-8ed4-42d7-977a-48b690244f4a'
                                type: object
                                description: 'A list of  components supported by this organisation'
                                nullable: true
                                multiple: true
                            owns:
                                _list: '/admin/objects?_self.schema.id=8ef831a8-8ed4-42d7-977a-48b690244f4a'
                                type: object
                                description: 'A list of  components supported by this organisation'
                                nullable: true
                                multiple: true
                            uses:
                                _list: '/admin/objects?_self.schema.id=8ef831a8-8ed4-42d7-977a-48b690244f4a'
                                type: object
                                description: 'A list of  components supported by this organisation'
                                nullable: true
                                multiple: true
                -
                    name: component
                    in: query
                    description: ''
                    required: false
                    schema:
                        type: object
                        properties:
                            applicationId:
                                type: string
                                example: '487842915'
                                nullable: true
                            name:
                                type: string
                                description: 'This key contains the name of the software. It contains the (short) public name of the product, which can be localised in the specific localisation section. It should be the name most people usually refer to the software. In case the software has both an internal ''code'' name and a commercial name, use the commercial name.'
                                example: Medusa
                                nullable: true
                            landingURL:
                                type: string
                                format: url
                                description: 'If the url parameter does not serve a human readable or browsable page, but only serves source code to a source control client, with this key you have an option to specify a landing page. This page, ideally, is where your users will land when they will click a button labeled something like ''Go to the application source code''. In case the product provides an automated graphical installer, this URL can point to a page which contains a reference to the source code but also offers the download of such an installer.'
                                example: 'https://example.com/italia/medusa'
                                nullable: true
                            isBasedOn:
                                type: string
                                description: "In case this software is a variant or a fork of another software, which might or might not contain a publiccode.yml file, this key will contain the url of the original project(s).\n\nThe existence of this key identifies the fork as a software variant, descending from the specified repositories."
                                example: 'https://github.com/italia/otello.git'
                                nullable: true
                            softwareVersion:
                                type: string
                                description: "This key contains the latest stable version number of the software. The version number is a string that is not meant to be interpreted and parsed but just displayed; parsers should not assume semantic versioning or any other specific version format.\n\nThe key can be omitted if the software is currently in initial development and has never been released yet."
                                example: '1.0'
                                nullable: true
                            releaseDate:
                                type: string
                                format: date
                                description: 'This key contains the date at which the latest version was released. This date is mandatory if the software has been released at least once and thus the version number is present.'
                                example: '2022-01-01'
                                nullable: true
                            logo:
                                type: string
                                description: 'This key contains the path to the logo of the software. Logos should be in vector format; raster formats are only allowed as a fallback. In this case, they should be transparent PNGs, minimum 1000px of width. The key value can be the relative path to the file starting from the root of the repository, or it can be an absolute URL pointing to the logo in raw version. In both cases, the file must reside inside the same repository where the publiccode.yml file is stored.'
                                example: 'https://avatars0.githubusercontent.com/u/34739001?s=280&v=4'
                                nullable: true
                            platforms:
                                type: array
                                description: "This key specifies which platform the software runs on. It is meant to describe the platforms that users will use to access and operate the software, rather than the platform the software itself runs on.\n\nUse the predefined values if possible. If the software runs on a platform for which a predefined value is not available, a different value can be used."
                                nullable: true
                            categories:
                                type: array
                                description: "A list of words that can be used to describe the software and can help building catalogs of open software.\n\nThe controlled vocabulary List of software categories contains the list of allowed values."
                                nullable: true
                            roadmap:
                                type: string
                                format: url
                                description: 'A link to a public roadmap of the software.'
                                example: 'https://vng.nl/agenda'
                                nullable: true
                            developmentStatus:
                                type: string
                                description: "The keys are:\n\n\n-  concept - The software is just a 'concept'. No actual code may have been produced, and the repository could simply be a placeholder.\n- development - Some effort has gone into the development of the software, but the code is not ready for the end user, even in a preliminary version (beta or alpha) to be tested by end users.\n- beta - The software is in the testing phase (alpha or beta). At this stage, the software might or might not have had a preliminary public release.\n- stable - The software has seen a first public release and is ready to be used in a production environment.\n- obsolete - The software is no longer maintained or kept up to date. All of the source code is archived and kept for historical reasons."
                                example: concept
                                enum:
                                    - concept
                                    - development
                                    - beta
                                    - stable
                                    - obsolete
                                nullable: true
                            softwareType:
                                type: string
                                description: "The keys are:\n\n- standalone/mobile - The software is a standalone, self-contained The software is a native mobile app.\n- standalone/iot - The software is suitable for an IoT context.\n- standalone/desktop - The software is typically installed and run in a a desktop operating system environment.\n- standalone/web - The software represents a web application usable by means of a browser.\n- standalone/backend - The software is a backend application.\n- standalone/other - The software has a different nature from the once listed above.\n- softwareAddon - The software is an addon, such as a plugin or a theme, for a more complex software (e.g. a CMS or an office suite).\n-  library - The software contains a library or an SDK to make it easier to third party developers to create new products.\n- configurationFiles - The software does not contain executable script but a set of configuration files. They may document how to obtain a certain deployment. They could be in the form of plain configuration files, bash scripts, ansible playbooks, Dockerfiles, or other instruction sets."
                                example: standalone/web
                                enum:
                                    - standalone/mobile
                                    - standalone/iot
                                    - standalone/desktop
                                    - standalone/web
                                    - standalone/backend
                                    - standalone/other
                                    - softwareAddon
                                    - library
                                    - configurationFiles
                                    - api
                                    - schema
                                    - data
                                    - process
                                    - model
                                nullable: true
                            inputTypes:
                                type: array
                                description: "A list of Media Types (MIME Types) as mandated in RFC 6838 which the application can handle as input.\n\nIn case the software does not support any input, you can skip this field or use application/x.empty"
                                nullable: true
                            outputTypes:
                                type: array
                                description: "A list of Media Types (MIME Types) as mandated in RFC 6838 which the application can handle as output.\n\nIn case the software does not support any output, you can skip this field or use application/x.empty"
                                nullable: true
                            applicationSuite:
                                _list: '/admin/objects?_self.schema.id=0c2655fb-db80-49ff-b1f0-662bf85b89e0'
                                type: object
                                nullable: true
                            url:
                                _list: '/admin/objects?_self.schema.id=5bd31d2f-fe14-4a1a-94f9-263f747e4485'
                                type: object
                                nullable: true
                            usedBy:
                                _list: '/admin/objects?_self.schema.id=fcc4e57c-f5e2-4527-b8ea-68b9d9bcf50a'
                                type: object
                                description: "A list of the names of prominent public administrations (that will serve as 'testimonials') that are currently known to the software maintainer to be using this software.\n\nParsers are encouraged to enhance this list also with other information that can obtain independently; for instance, a fork of a software, owned by an administration, could be used as a signal of usage of the software."
                                nullable: true
                                multiple: true
                            intendedAudience:
                                _list: '/admin/objects?_self.schema.id=a22a918f-7fac-4395-becb-fbed741ceeea'
                                type: object
                                nullable: true
                            description:
                                _list: '/admin/objects?_self.schema.id=c6b0dd59-1ba2-49f9-8071-61dde39bb5e5'
                                type: object
                                nullable: true
                            legal:
                                _list: '/admin/objects?_self.schema.id=60dc635f-5c92-41b9-957c-f33f17d45f6b'
                                type: object
                                nullable: true
                            maintenance:
                                _list: '/admin/objects?_self.schema.id=1c2c1c24-d6b5-4f43-9eab-a3029e27d9d7'
                                type: object
                                nullable: true
                            localisation:
                                _list: '/admin/objects?_self.schema.id=c7b42d57-3011-4b71-adfc-3f28d4fd6420'
                                type: object
                                nullable: true
                            dependsOn:
                                _list: '/admin/objects?_self.schema.id=3c262092-4617-486c-ba81-165243689ef3'
                                type: object
                                nullable: true
                            nl:
                                _list: '/admin/objects?_self.schema.id=aed2f0ec-7fcc-48db-a0f6-8be16be44e59'
                                type: object
                                nullable: true
                            rating:
                                _list: '/admin/objects?_self.schema.id=cff7ef6c-7b07-4a3a-9596-b2db1a2ac163'
                                type: object
                                nullable: true
        post:
            operationId: repository-post-item
            summary: Repository
            tags:
                - repository
            description: ''
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Repository'
                    application/xml:
                        schema:
                            $ref: '#/components/schemas/Repository'
            responses:
                200:
                    description: ''
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Repository'
                        application/xml:
                            schema:
                                $ref: '#/components/schemas/Repository'
components:
    schemas:
        Application:
            $id: 'https://opencatalogi.nl/oc.application.schema.json'
            $schema: 'https://docs.commongateway.nl/schemas/Entity.schema.json'
            title: Application
            description: ''
            version: 0.1.0
            exclude: false
            maxDepth: 5
            nameProperties: {  }
            required:
                - name
            properties:
                name:
                    type: string
                    nullable: true
                shortDescription:
                    type: string
                    nullable: true
                description:
                    type: string
                    nullable: true
                detailPageImageUrl:
                    type: string
                    nullable: true
                documentationUrl:
                    type: string
                    nullable: true
                demoUrl:
                    type: string
                    nullable: true
                bpmnProcessUrl:
                    type: string
                    nullable: true
                isPublished:
                    type: boolean
                    nullable: true
                owner:
                    _list: '/admin/objects?_self.schema.id=215a3f77-b1cc-4269-8a4f-e387c6825d94'
                    type: object
                    nullable: true
                components:
                    _list: '/admin/objects?_self.schema.id=8ef831a8-8ed4-42d7-977a-48b690244f4a'
                    type: object
                    nullable: true
                    multiple: true
            type: object
        Organisation:
            $id: 'https://opencatalogi.nl/oc.organisation.schema.json'
            $schema: 'https://docs.commongateway.nl/schemas/Entity.schema.json'
            title: Organisation
            description: 'extension of the publiccode standard '
            version: 0.1.0
            exclude: false
            maxDepth: 5
            nameProperties: {  }
            properties:
                name:
                    type: string
                    nullable: true
                description:
                    type: string
                    nullable: true
                logo:
                    type: string
                    format: uri
                    description: 'The logo of this organisation'
                    nullable: true
                token:
                    type: string
                    description: 'An optional NL-Design token that contains the organisations style'
                    nullable: true
                github:
                    type: string
                    format: url
                    description: 'A link the the organisations github '
                    nullable: true
                gitlab:
                    type: string
                    format: url
                    description: 'A link to the organisations gitlab'
                    nullable: true
                website:
                    type: string
                    nullable: true
                phone:
                    type: string
                    nullable: true
                email:
                    type: string
                    nullable: true
                type:
                    type: string
                    description: 'The type of this organisation'
                    example: public
                    enum:
                        - public
                        - private
                        - unkown
                    nullable: true
                catalogusAPI:
                    type: string
                    format: uri
                    nullable: true
                supports:
                    _list: '/admin/objects?_self.schema.id=8ef831a8-8ed4-42d7-977a-48b690244f4a'
                    type: object
                    description: 'A list of  components supported by this organisation'
                    nullable: true
                    multiple: true
                owns:
                    _list: '/admin/objects?_self.schema.id=8ef831a8-8ed4-42d7-977a-48b690244f4a'
                    type: object
                    description: 'A list of  components supported by this organisation'
                    nullable: true
                    multiple: true
                uses:
                    _list: '/admin/objects?_self.schema.id=8ef831a8-8ed4-42d7-977a-48b690244f4a'
                    type: object
                    description: 'A list of  components supported by this organisation'
                    nullable: true
                    multiple: true
            type: object
        Component:
            $id: 'https://opencatalogi.nl/oc.component.schema.json'
            $schema: 'https://docs.commongateway.nl/schemas/Entity.schema.json'
            title: Component
            description: "Based on the [top level component](https://yml.publiccode.tools/schema.core.html#top-level-keys-and-sections) of public code. represent a pease of software that may iether be  standalone or part of a larger application.\n\n**The PublicCode standard has been extenden for this API in te following way's**\n- To the `type` property the following enums where added\n- - Api\n- - Schema\n- - Data\n- The `inputType` property was used (its depracticed in PublicCode)\n- The `outputType` property was uses (its depracticed in PublicCode)\n- The `nl` country exenstion was added in line with the [PublicCode country extensions](https://yml.publiccode.tools/country.html) guidelines\n- applicationId was added for the codebase repository (like a github repository id)."
            version: 0.1.0
            exclude: false
            maxDepth: 5
            nameProperties: {  }
            required:
                - name
            properties:
                applicationId:
                    type: string
                    example: '487842915'
                    nullable: true
                name:
                    type: string
                    description: 'This key contains the name of the software. It contains the (short) public name of the product, which can be localised in the specific localisation section. It should be the name most people usually refer to the software. In case the software has both an internal ''code'' name and a commercial name, use the commercial name.'
                    example: Medusa
                    nullable: true
                landingURL:
                    type: string
                    format: url
                    description: 'If the url parameter does not serve a human readable or browsable page, but only serves source code to a source control client, with this key you have an option to specify a landing page. This page, ideally, is where your users will land when they will click a button labeled something like ''Go to the application source code''. In case the product provides an automated graphical installer, this URL can point to a page which contains a reference to the source code but also offers the download of such an installer.'
                    example: 'https://example.com/italia/medusa'
                    nullable: true
                isBasedOn:
                    type: string
                    description: "In case this software is a variant or a fork of another software, which might or might not contain a publiccode.yml file, this key will contain the url of the original project(s).\n\nThe existence of this key identifies the fork as a software variant, descending from the specified repositories."
                    example: 'https://github.com/italia/otello.git'
                    nullable: true
                softwareVersion:
                    type: string
                    description: "This key contains the latest stable version number of the software. The version number is a string that is not meant to be interpreted and parsed but just displayed; parsers should not assume semantic versioning or any other specific version format.\n\nThe key can be omitted if the software is currently in initial development and has never been released yet."
                    example: '1.0'
                    nullable: true
                releaseDate:
                    type: string
                    format: date
                    description: 'This key contains the date at which the latest version was released. This date is mandatory if the software has been released at least once and thus the version number is present.'
                    example: '2022-01-01'
                    nullable: true
                logo:
                    type: string
                    description: 'This key contains the path to the logo of the software. Logos should be in vector format; raster formats are only allowed as a fallback. In this case, they should be transparent PNGs, minimum 1000px of width. The key value can be the relative path to the file starting from the root of the repository, or it can be an absolute URL pointing to the logo in raw version. In both cases, the file must reside inside the same repository where the publiccode.yml file is stored.'
                    example: 'https://avatars0.githubusercontent.com/u/34739001?s=280&v=4'
                    nullable: true
                platforms:
                    type: array
                    description: "This key specifies which platform the software runs on. It is meant to describe the platforms that users will use to access and operate the software, rather than the platform the software itself runs on.\n\nUse the predefined values if possible. If the software runs on a platform for which a predefined value is not available, a different value can be used."
                    nullable: true
                categories:
                    type: array
                    description: "A list of words that can be used to describe the software and can help building catalogs of open software.\n\nThe controlled vocabulary List of software categories contains the list of allowed values."
                    nullable: true
                roadmap:
                    type: string
                    format: url
                    description: 'A link to a public roadmap of the software.'
                    example: 'https://vng.nl/agenda'
                    nullable: true
                developmentStatus:
                    type: string
                    description: "The keys are:\n\n\n-  concept - The software is just a 'concept'. No actual code may have been produced, and the repository could simply be a placeholder.\n- development - Some effort has gone into the development of the software, but the code is not ready for the end user, even in a preliminary version (beta or alpha) to be tested by end users.\n- beta - The software is in the testing phase (alpha or beta). At this stage, the software might or might not have had a preliminary public release.\n- stable - The software has seen a first public release and is ready to be used in a production environment.\n- obsolete - The software is no longer maintained or kept up to date. All of the source code is archived and kept for historical reasons."
                    example: concept
                    enum:
                        - concept
                        - development
                        - beta
                        - stable
                        - obsolete
                    nullable: true
                softwareType:
                    type: string
                    description: "The keys are:\n\n- standalone/mobile - The software is a standalone, self-contained The software is a native mobile app.\n- standalone/iot - The software is suitable for an IoT context.\n- standalone/desktop - The software is typically installed and run in a a desktop operating system environment.\n- standalone/web - The software represents a web application usable by means of a browser.\n- standalone/backend - The software is a backend application.\n- standalone/other - The software has a different nature from the once listed above.\n- softwareAddon - The software is an addon, such as a plugin or a theme, for a more complex software (e.g. a CMS or an office suite).\n-  library - The software contains a library or an SDK to make it easier to third party developers to create new products.\n- configurationFiles - The software does not contain executable script but a set of configuration files. They may document how to obtain a certain deployment. They could be in the form of plain configuration files, bash scripts, ansible playbooks, Dockerfiles, or other instruction sets."
                    example: standalone/web
                    enum:
                        - standalone/mobile
                        - standalone/iot
                        - standalone/desktop
                        - standalone/web
                        - standalone/backend
                        - standalone/other
                        - softwareAddon
                        - library
                        - configurationFiles
                        - api
                        - schema
                        - data
                        - process
                        - model
                    nullable: true
                inputTypes:
                    type: array
                    description: "A list of Media Types (MIME Types) as mandated in RFC 6838 which the application can handle as input.\n\nIn case the software does not support any input, you can skip this field or use application/x.empty"
                    nullable: true
                outputTypes:
                    type: array
                    description: "A list of Media Types (MIME Types) as mandated in RFC 6838 which the application can handle as output.\n\nIn case the software does not support any output, you can skip this field or use application/x.empty"
                    nullable: true
                applicationSuite:
                    _list: '/admin/objects?_self.schema.id=0c2655fb-db80-49ff-b1f0-662bf85b89e0'
                    type: object
                    nullable: true
                url:
                    _list: '/admin/objects?_self.schema.id=5bd31d2f-fe14-4a1a-94f9-263f747e4485'
                    type: object
                    nullable: true
                usedBy:
                    _list: '/admin/objects?_self.schema.id=fcc4e57c-f5e2-4527-b8ea-68b9d9bcf50a'
                    type: object
                    description: "A list of the names of prominent public administrations (that will serve as 'testimonials') that are currently known to the software maintainer to be using this software.\n\nParsers are encouraged to enhance this list also with other information that can obtain independently; for instance, a fork of a software, owned by an administration, could be used as a signal of usage of the software."
                    nullable: true
                    multiple: true
                intendedAudience:
                    _list: '/admin/objects?_self.schema.id=a22a918f-7fac-4395-becb-fbed741ceeea'
                    type: object
                    nullable: true
                description:
                    _list: '/admin/objects?_self.schema.id=c6b0dd59-1ba2-49f9-8071-61dde39bb5e5'
                    type: object
                    nullable: true
                legal:
                    _list: '/admin/objects?_self.schema.id=60dc635f-5c92-41b9-957c-f33f17d45f6b'
                    type: object
                    nullable: true
                maintenance:
                    _list: '/admin/objects?_self.schema.id=1c2c1c24-d6b5-4f43-9eab-a3029e27d9d7'
                    type: object
                    nullable: true
                localisation:
                    _list: '/admin/objects?_self.schema.id=c7b42d57-3011-4b71-adfc-3f28d4fd6420'
                    type: object
                    nullable: true
                dependsOn:
                    _list: '/admin/objects?_self.schema.id=3c262092-4617-486c-ba81-165243689ef3'
                    type: object
                    nullable: true
                nl:
                    _list: '/admin/objects?_self.schema.id=aed2f0ec-7fcc-48db-a0f6-8be16be44e59'
                    type: object
                    nullable: true
                rating:
                    _list: '/admin/objects?_self.schema.id=cff7ef6c-7b07-4a3a-9596-b2db1a2ac163'
                    type: object
                    nullable: true
            type: object
        Catalogi:
            $id: 'https://opencatalogi.nl/oc.catalogi.schema.json'
            $schema: 'https://docs.commongateway.nl/schemas/Entity.schema.json'
            title: Catalogi
            description: ''
            version: 0.1.0
            exclude: false
            maxDepth: 5
            nameProperties: {  }
            properties:
                rsin:
                    type: string
                    nullable: true
                pki:
                    type: string
                    nullable: true
                source:
                    _list: '/admin/objects?_self.schema.id=5f4c5088-d2bf-40bc-8abb-599e57c9284f'
                    type: object
                    nullable: true
                organisation:
                    _list: '/admin/objects?_self.schema.id=fcc4e57c-f5e2-4527-b8ea-68b9d9bcf50a'
                    type: object
                    nullable: true
            type: object
        Repository:
            $id: 'https://opencatalogi.nl/oc.repository.schema.json'
            $schema: 'https://docs.commongateway.nl/schemas/Entity.schema.json'
            title: Repository
            description: ''
            version: 0.1.0
            exclude: false
            maxDepth: 5
            nameProperties: {  }
            properties:
                source:
                    type: string
                    enum:
                        - github
                        - gitlab
                    nullable: true
                name:
                    type: string
                    nullable: true
                url:
                    type: string
                    nullable: true
                avatar_url:
                    type: string
                    nullable: true
                last_change:
                    type: string
                    nullable: true
                stars:
                    type: number
                    nullable: true
                fork_count:
                    type: number
                    nullable: true
                issue_open_count:
                    type: number
                    nullable: true
                merge_request_open_count:
                    type: number
                    nullable: true
                programming_languages:
                    type: array
                    nullable: true
                topics:
                    type: array
                    nullable: true
                content:
                    type: string
                    nullable: true
                publiccode_url:
                    type: string
                    nullable: true
                default_owner:
                    type: string
                    nullable: true
                organisation:
                    _list: '/admin/objects?_self.schema.id=fcc4e57c-f5e2-4527-b8ea-68b9d9bcf50a'
                    type: object
                    nullable: true
                component:
                    _list: '/admin/objects?_self.schema.id=8ef831a8-8ed4-42d7-977a-48b690244f4a'
                    type: object
                    nullable: true
            type: object
security: {  }
tags: {  }
